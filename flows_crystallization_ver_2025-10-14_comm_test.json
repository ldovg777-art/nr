[
  {
    "id": "0ed193efefc7d734",
    "type": "tab",
    "label": "Диагностика",
    "disabled": false,
    "info": "Вкладка для наблюдаемости: catch/status/complete -> debug"
  },
  {
    "id": "677ca870963e883f",
    "type": "tab",
    "label": "дата время",
    "disabled": false,
    "info": "Узел типа tab.",
    "env": []
  },
  {
    "id": "db277a3598de4f9a",
    "type": "tab",
    "label": "Панель Управления",
    "disabled": false,
    "info": "Основная панель для управления и мониторинга процесса кристаллизации."
  },
  {
    "id": "f60d96b31f20271a",
    "type": "tab",
    "label": "Настройки Процесса",
    "disabled": false,
    "info": "Редактирование всех параметров и коэффициентов процесса."
  },
  {
    "id": "7e656866ddfe4855",
    "type": "tab",
    "label": "Архив и Аналитика",
    "disabled": false,
    "info": "Просмотр и фильтрация исторических данных процесса."
  },
  {
    "id": "f4b9db0f497b9f54",
    "type": "tab",
    "label": "Симулятор Процесса",
    "disabled": false,
    "info": "Этот поток генерирует смоделированную кривую температуры для отладки основного алгоритма без реального оборудования."
  },
  {
    "id": "e8bc55b391f479e3",
    "type": "tab",
    "label": "Кристаллизация - Логика Процесса",
    "disabled": false,
    "info": "Главный управляющий автомат для процесса кристаллизации. Версия с последовательным I/O и безопасным сбросом."
  },
  {
    "id": "64b65a1231f8c8ed",
    "type": "tab",
    "label": "Кристаллизация - Параметры (Init & Read)",
    "disabled": false,
    "info": "Инициализация и чтение параметров кристаллизации из файла."
  },
  {
    "id": "f4ca7c12859fb17f",
    "type": "tab",
    "label": "Кристаллизация - Параметры (Save & Apply)",
    "disabled": false,
    "info": "Сохранение параметров, применение и перезапуск цикла."
  },
  {
    "id": "8372291c47969a65",
    "type": "tab",
    "label": "Серверный Интерфейс (HMI)",
    "disabled": false,
    "info": "Логика для обработки команд, приходящих от панели оператора через сервер (OPC UA, MQTT и т.д.)"
  },
  {
    "id": "c0bf68bfbce72297",
    "type": "tab",
    "label": "Server (Modbus)",
    "disabled": false,
    "info": "Modbus TCP Server для панели Weintek. Циклическое обновление регистров из глобальных переменных для отображения на HMI."
  },
  {
    "id": "d6343c4f851076e5",
    "type": "tab",
    "label": "ADAM6224 AO Control",
    "disabled": false,
    "info": "Управление AO 0..3 ADAM-6224 (4–20 мА): единый цикл 1 с, пер‑канальное масштабирование, RBE (только при изменении), безопасная инициализация."
  },
  {
    "id": "f264eeefd9cbcd8c",
    "type": "tab",
    "label": "AO Config Reader",
    "disabled": false,
    "info": "Read analog output configuration file every 2 minutes and at startup."
  },
  {
    "id": "dc976ebfa2ef6949",
    "type": "subflow",
    "name": "sf_valve_io (manual>hmi>auto) (2)",
    "info": "Единый вход: msg.payload=0/1, msg.source in ['manual','hmi','auto'].\\nПриоритет: manual>hmi>auto. Антидребезг (minIntervalMs).\\nВыход 1: целевое состояние клапана (0/1) -> DO и UI.\\nВыход 2: статус/текст.\\nХранит текущее состояние в flow.valve.",
    "in": [
      {
        "x": 80,
        "y": 60,
        "wires": [
          {
            "id": "d376dbbd2c1f0455"
          }
        ]
      }
    ],
    "out": [
      {
        "x": 620,
        "y": 60,
        "wires": [
          {
            "id": "d376dbbd2c1f0455",
            "port": 0
          }
        ]
      },
      {
        "x": 620,
        "y": 120,
        "wires": [
          {
            "id": "d376dbbd2c1f0455",
            "port": 1
          }
        ]
      }
    ],
    "env": [
      {
        "name": "minIntervalMs",
        "type": "num",
        "value": "500"
      }
    ]
  },
  {
    "id": "8f6836e9bb397564",
    "type": "ui_base",
    "theme": {
      "name": "theme-light",
      "lightTheme": {
        "default": "#0094CE",
        "baseColor": "#0094CE",
        "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
        "edited": true,
        "reset": false
      },
      "darkTheme": {
        "default": "#097479",
        "baseColor": "#097479",
        "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
        "edited": false
      },
      "customTheme": {
        "name": "Untitled Theme 1",
        "default": "#4B7930",
        "baseColor": "#4B7930",
        "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
      },
      "themeState": {
        "base-color": {
          "default": "#0094CE",
          "value": "#0094CE",
          "edited": false
        },
        "page-titlebar-backgroundColor": {
          "value": "#0094CE",
          "edited": false
        },
        "page-backgroundColor": {
          "value": "#fafafa",
          "edited": false
        },
        "page-sidebar-backgroundColor": {
          "value": "#ffffff",
          "edited": false
        },
        "group-textColor": {
          "value": "#1bbfff",
          "edited": false
        },
        "group-borderColor": {
          "value": "#ffffff",
          "edited": false
        },
        "group-backgroundColor": {
          "value": "#ffffff",
          "edited": false
        },
        "widget-textColor": {
          "value": "#111111",
          "edited": false
        },
        "widget-backgroundColor": {
          "value": "#0094ce",
          "edited": false
        },
        "widget-borderColor": {
          "value": "#ffffff",
          "edited": false
        },
        "base-font": {
          "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
        }
      },
      "angularTheme": {
        "primary": "indigo",
        "accents": "blue",
        "warn": "red",
        "background": "grey",
        "palette": "light"
      }
    },
    "site": {
      "name": "Node-RED Dashboard",
      "hideToolbar": "false",
      "allowSwipe": "false",
      "lockMenu": "false",
      "allowTempTheme": "true",
      "dateFormat": "DD/MM/YYYY",
      "sizes": {
        "sx": 48,
        "sy": 48,
        "gx": 6,
        "gy": 6,
        "cx": 6,
        "cy": 6,
        "px": 0,
        "py": 0
      }
    }
  },
  {
    "id": "de5fd058971bb9d0",
    "type": "ui_tab",
    "name": "Главная Панель",
    "icon": "dashboard",
    "order": 1
  },
  {
    "id": "1fabfb4c4cc75fb2",
    "type": "ui_tab",
    "name": "Настройки Процесса",
    "icon": "settings",
    "order": 2
  },
  {
    "id": "dd1e452aa1c98c36",
    "type": "ui_tab",
    "name": "Архив и Аналитика",
    "icon": "history",
    "order": 3
  },
  {
    "id": "f6f5c8f9750ec824",
    "type": "ui_tab",
    "name": "Журнал изменений",
    "icon": "info",
    "order": 4
  },
  {
    "id": "6a2db91e5da38c6d",
    "type": "ui_group",
    "name": "Управление и Статус",
    "tab": "de5fd058971bb9d0",
    "order": 1,
    "disp": true,
    "width": "12",
    "collapse": false,
    "className": ""
  },
  {
    "id": "5452d1cd18bb3597",
    "type": "ui_group",
    "name": "Ключевые Показатели",
    "tab": "de5fd058971bb9d0",
    "order": 2,
    "disp": true,
    "width": "12"
  },
  {
    "id": "07f6971db111ea65",
    "type": "ui_group",
    "name": "Ручное Управление",
    "tab": "de5fd058971bb9d0",
    "order": 3,
    "disp": true,
    "width": "12"
  },
  {
    "id": "80f44018e0a7f361",
    "type": "ui_group",
    "name": "Оперативный График",
    "tab": "de5fd058971bb9d0",
    "order": 4,
    "disp": true,
    "width": "24"
  },
  {
    "id": "3d5a5f3a0a3cf4f0",
    "type": "ui_group",
    "name": "История версий",
    "tab": "f6f5c8f9750ec824",
    "order": 1,
    "disp": true,
    "width": "12",
    "collapse": false,
    "className": ""
  },
  {
    "id": "bf1dea3b0e4a4173",
    "type": "ui_group",
    "name": "Параметры Процесса",
    "tab": "1fabfb4c4cc75fb2",
    "order": 2,
    "disp": true,
    "width": "8",
    "collapse": false,
    "className": ""
  },
  {
    "id": "b020d169c958d0c5",
    "type": "ui_group",
    "name": "Коэффициенты Формулы Cmac",
    "tab": "1fabfb4c4cc75fb2",
    "order": 3,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "09a62aae158d5450",
    "type": "ui_group",
    "name": "Управление параметрами",
    "tab": "1fabfb4c4cc75fb2",
    "order": 1,
    "disp": true,
    "width": "4",
    "collapse": false,
    "className": ""
  },
  {
    "id": "b2b4f45e0e161f86",
    "type": "ui_group",
    "name": "Фильтр Архива",
    "tab": "dd1e452aa1c98c36",
    "order": 1,
    "disp": true,
    "width": "12"
  },
  {
    "id": "b0b7e10734f2db62",
    "type": "ui_group",
    "name": "История Процесса",
    "tab": "dd1e452aa1c98c36",
    "order": 2,
    "disp": true,
    "width": "24"
  },
  {
    "id": "9264ac7c83332c5b",
    "type": "ui_group",
    "name": "Детальный анализ последнего цикла",
    "tab": "dd1e452aa1c98c36",
    "order": 3,
    "disp": true,
    "width": "12"
  },
  {
    "id": "modbus-server-config",
    "type": "modbus-client",
    "name": "ADAM-6717 Server",
    "clienttype": "tcp",
    "bufferCommands": true,
    "stateLogEnabled": false,
    "queueLogEnabled": false,
    "failureLogEnabled": false,
    "tcpHost": "192.168.0.214",
    "tcpPort": "502",
    "tcpType": "DEFAULT",
    "serialPort": "/dev/ttyUSB",
    "serialType": "RTU-BUFFERD",
    "serialBaudrate": "9600",
    "serialDatabits": "8",
    "serialStopbits": "1",
    "serialParity": "none",
    "serialConnectionDelay": "100",
    "serialAsciiResponseStartDelimiter": "",
    "unit_id": 1,
    "commandDelay": 1,
    "clientTimeout": 1000,
    "reconnectOnTimeout": true,
    "reconnectTimeout": 2000,
    "parallelUnitIdsAllowed": true
  },
  {
    "id": "SIM_GROUP_001",
    "type": "ui_group",
    "name": "Управление Симулятором",
    "tab": "SIM_UI_TAB_001",
    "order": 1,
    "disp": true,
    "width": "12",
    "collapse": false
  },
  {
    "id": "SIM_GROUP_002",
    "type": "ui_group",
    "name": "График Симуляции",
    "tab": "SIM_UI_TAB_001",
    "order": 2,
    "disp": true,
    "width": "12",
    "collapse": false
  },
  {
    "id": "SIM_UI_TAB_001",
    "type": "ui_tab",
    "name": "Симулятор",
    "icon": "fa-cogs",
    "order": 4
  },
  {
    "id": "manual_ao_group",
    "type": "ui_group",
    "name": "Ручное управление AO",
    "tab": "manual_ao_tab_ui",
    "order": 1,
    "disp": true,
    "width": "6",
    "collapse": false
  },
  {
    "id": "manual_ao_tab_ui",
    "type": "ui_tab",
    "name": "AO Manual Control",
    "icon": "dashboard",
    "order": 1
  },
  {
    "id": "9dde8127.3f5df",
    "type": "ui_tab",
    "name": "ADAM-6717",
    "icon": "dashboard",
    "order": 2,
    "disabled": false,
    "hidden": false
  },
  {
    "id": "iteration_ui_tab",
    "type": "ui_tab",
    "name": "Итерация",
    "icon": "show_chart",
    "order": 2
  },
  {
    "id": "iteration_ui_group",
    "type": "ui_group",
    "name": "График и Управление Итерацией",
    "tab": "iteration_ui_tab",
    "order": 1,
    "disp": true,
    "width": "12",
    "collapse": false
  },
  {
    "id": "b5ad3d26d2dec3f7",
    "type": "ui_group",
    "name": "Default",
    "tab": "bf598e27688ff446",
    "order": 1,
    "disp": false,
    "width": "32",
    "collapse": false,
    "className": ""
  },
  {
    "id": "bf598e27688ff446",
    "type": "ui_tab",
    "name": "Home",
    "icon": "dashboard",
    "disabled": false,
    "hidden": false
  },
  {
    "id": "890b934665542552",
    "type": "ui_tab",
    "name": "Результаты по Шагам",
    "icon": "assignment",
    "order": 4,
    "disabled": false,
    "hidden": false
  },
  {
    "id": "9348979b18aad42e",
    "type": "ui_group",
    "name": "Значения AI 1 (Шаги 1-5)",
    "tab": "890b934665542552",
    "order": 1,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "1c9c669cfa71380c",
    "type": "ui_group",
    "name": "Значения AI 2 (Шаги 1-5)",
    "tab": "890b934665542552",
    "order": 2,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "78478d37299df3f2",
    "type": "ui_group",
    "name": "Значения AI 3 (Шаги 1-5)",
    "tab": "890b934665542552",
    "order": 3,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "4ad62ba0c83b740b",
    "type": "ui_group",
    "name": "Значения AI 4 (Шаги 1-5)",
    "tab": "890b934665542552",
    "order": 4,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "9eaeaa2ca534b09b",
    "type": "ui_group",
    "name": "Значения AI 5 (Шаги 1-5)",
    "tab": "890b934665542552",
    "order": 5,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "d513ea3bdc3c943e",
    "type": "ui_group",
    "name": "Значения AI 6 (Шаги 1-5)",
    "tab": "890b934665542552",
    "order": 6,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "1c524b55f70bd43f",
    "type": "ui_group",
    "name": "Значения AI 7 (Шаги 1-5)",
    "tab": "890b934665542552",
    "order": 7,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "0f43dd3488f8235e",
    "type": "ui_group",
    "name": "Значения AI 8 (Шаги 1-5)",
    "tab": "890b934665542552",
    "order": 8,
    "disp": true,
    "width": "6",
    "collapse": false,
    "className": ""
  },
  {
    "id": "1d5f2aa7532ab803",
    "type": "ui_tab",
    "name": "Аналоговые Выходы LC",
    "icon": "settings_input_component",
    "order": 10
  },
  {
    "id": "d376dbbd2c1f0455",
    "type": "function",
    "z": "dc976ebfa2ef6949",
    "name": "priorities + debounce",
    "func": "// Enhanced Valve IO (priorities + debounce)\n\n// msg.payload = 0/1 for command; msg.source = 'manual'|'hmi'|'auto'.\n// Optional msg.clear clears stored commands by source.\n// This node arbitrates commands based on priority: manual > hmi > auto, debounces rapid changes,\n// and publishes the resulting valve state to both flow and global contexts.\n\nconst src = (msg.source || '').toLowerCase();\nconst validSources = ['manual','hmi','auto'];\n// Retrieve stored commands per source\nlet cmds = context.get('cmds') || { manual: null, hmi: null, auto: null };\n\n// Handle clear requests\nif (msg.clear) {\n    const clears = Array.isArray(msg.clear) ? msg.clear : [msg.clear];\n    for (const c of clears) {\n        let key = c;\n        // unify hmi clear into manual\n        if (key === 'hmi') key = 'manual';\n        if (key === 'all') {\n            cmds = { manual: null, hmi: null, auto: null };\n            break;\n        }\n        if (cmds.hasOwnProperty(key)) {\n            cmds[key] = null;\n        }\n    }\n    context.set('cmds', cmds);\n    return null;\n}\n\n// Validate and set command for known sources\nif (validSources.includes(src)) {\n    const val = Number(msg.payload) ? 1 : 0;\n    if (src === 'hmi') {\n        // unify HMI commands into manual slot\n        cmds.manual = val;\n        cmds.hmi = null;\n    } else {\n        cmds[src] = val;\n    }\n    context.set('cmds', cmds);\n} else {\n    node.status({fill:'red',shape:'dot',text:'bad source'});\n    return null;\n}\n\n// Clear commands from inactive sources based on manual mode\nconst manualModeFlag = global.get('HMI_ManualMode') || 0;\nif (manualModeFlag) {\n    cmds.auto = null;\n} else {\n    cmds.manual = null;\n    cmds.hmi = null;\n}\ncontext.set('cmds', cmds);\n\n// Resolve desired state based on priority\nconst resolve = () => {\n    if (cmds.manual !== null) return cmds.manual;\n    if (cmds.hmi !== null) return cmds.hmi;\n    if (cmds.auto !== null) return cmds.auto;\n    return 0;\n};\nlet desired = resolve();\nconst now = Date.now();\nconst minInterval = Number(env.get('minIntervalMs') || 300);\nlet lastOut = context.get('lastOut');\nlet lastTs = context.get('lastTs') || 0;\nif (lastOut === undefined) lastOut = -1;\nif (now - lastTs < minInterval && desired !== lastOut) {\n    node.status({fill:'yellow',shape:'ring',text:`debounce ${minInterval - (now - lastTs)}ms`});\n    desired = lastOut;\n}\ncontext.set('lastOut', desired);\ncontext.set('lastTs', now);\n// Publish state: update flow and global contexts\nflow.set('valve', desired);\nglobal.set('kl', desired);\nglobal.set('HMI_ManualValveState', desired);\n// Output 0: numeric command with source\nconst out1 = { payload: desired, source: src };\n// Output 1: numeric state for UI\nconst out2 = { payload: desired };\n// Update node status with human-readable text\nconst statusText = `${desired ? 'OPEN' : 'CLOSED'} via ${src}`;\nnode.status({fill: desired ? 'green' : 'grey', shape:'dot', text: statusText});\nreturn [out1, out2];\n",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 350,
    "y": 60,
    "wires": [
      [],
      []
    ]
  },
  {
    "id": "23f4101f9536b199",
    "type": "catch",
    "z": "0ed193efefc7d734",
    "name": "catch (all)",
    "scope": [],
    "uncaught": false,
    "x": 160,
    "y": 80,
    "wires": [
      [
        "7888837b878f9824"
      ]
    ]
  },
  {
    "id": "bf8c2731e90ab7c2",
    "type": "status",
    "z": "0ed193efefc7d734",
    "name": "status (all)",
    "scope": [],
    "x": 160,
    "y": 140,
    "wires": [
      [
        "41b28b2ca09ca6fe"
      ]
    ]
  },
  {
    "id": "d0adc63a68554228",
    "type": "complete",
    "z": "0ed193efefc7d734",
    "name": "complete (all)",
    "scope": [],
    "uncaught": false,
    "x": 160,
    "y": 200,
    "wires": [
      [
        "9751b1b8fb2783d5"
      ]
    ]
  },
  {
    "id": "7888837b878f9824",
    "type": "debug",
    "z": "0ed193efefc7d734",
    "name": "errors",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 380,
    "y": 80,
    "wires": []
  },
  {
    "id": "41b28b2ca09ca6fe",
    "type": "debug",
    "z": "0ed193efefc7d734",
    "name": "statuses",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 380,
    "y": 140,
    "wires": []
  },
  {
    "id": "9751b1b8fb2783d5",
    "type": "debug",
    "z": "0ed193efefc7d734",
    "name": "completions",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 400,
    "y": 200,
    "wires": []
  },
  {
    "id": "1bd5d294b5a7f9c3",
    "type": "inject",
    "z": "677ca870963e883f",
    "name": "Таймер (1 сек)",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "1",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 220,
    "y": 100,
    "wires": [
      [
        "fbcc4354d3b5dd1a"
      ]
    ],
    "info": "Триггер (Inject): Таймер (1 сек).\nНазначение: периодическая или одноразовая генерация сообщений."
  },
  {
    "id": "fbcc4354d3b5dd1a",
    "type": "function",
    "z": "677ca870963e883f",
    "name": "Форматирование даты и времени",
    "func": "// Создаем объект с текущей датой и временем\nconst now = new Date();\n\n// Массив с названиями дней недели\nconst days = ['Воскресенье', 'Понедельник', 'Вторник', 'Среда', 'Четверг', 'Пятница', 'Суббота'];\n\n// Функция для добавления нуля к числам < 10 (например, 7 -> 07)\nfunction pad(num) {\n    return num < 10 ? '0' + num : num;\n}\n\n// Собираем дату\nconst year = now.getFullYear();\nconst month = pad(now.getMonth() + 1); // Месяцы начинаются с 0\nconst day = pad(now.getDate());\n\n// Собираем время\nconst hours = pad(now.getHours());\nconst minutes = pad(now.getMinutes());\nconst seconds = pad(now.getSeconds());\n\n// Получаем день недели\nconst dayOfWeek = days[now.getDay()];\n\n// Формируем итоговую строку\nmsg.payload = `${year}.${month}.${day} ${hours}:${minutes}:${seconds} (${dayOfWeek})`;\n\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 470,
    "y": 100,
    "wires": [
      [
        "85112684c53a5060"
      ]
    ],
    "info": "Функция: Форматирование даты и времени.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "85112684c53a5060",
    "type": "ui_text",
    "z": "677ca870963e883f",
    "group": "6a2db91e5da38c6d",
    "order": 4,
    "width": 6,
    "height": 1,
    "name": "",
    "label": "Дата и время:",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "x": 720,
    "y": 100,
    "wires": [],
    "info": "Текстовое поле UI: Дата и время:."
  },
  {
    "id": "441033405301e025",
    "type": "inject",
    "z": "677ca870963e883f",
    "name": "Инициализация флагов при старте",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": "0.2",
    "topic": "ao_manual_mode",
    "payload": "false",
    "payloadType": "bool",
    "x": 270,
    "y": 180,
    "wires": [
      [
        "5eebda12d4a47ccb"
      ]
    ]
  },
  {
    "id": "5eebda12d4a47ccb",
    "type": "change",
    "z": "677ca870963e883f",
    "name": "Сброс флагов ao_manual_mode и sim_mode",
    "rules": [
      {
        "t": "set",
        "p": "ao_manual_mode",
        "pt": "global",
        "to": false,
        "tot": "bool"
      },
      {
        "t": "set",
        "p": "simulation_mode",
        "pt": "global",
        "to": false,
        "tot": "bool"
      }
    ],
    "x": 660,
    "y": 180,
    "wires": [
      []
    ]
  },
  {
    "id": "78bdbf73baa82ffe",
    "type": "ui_text",
    "z": "db277a3598de4f9a",
    "group": "6a2db91e5da38c6d",
    "order": 2,
    "width": 6,
    "height": 1,
    "name": "Статус",
    "label": "Статус:",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "x": 400,
    "y": 100,
    "wires": [],
    "info": "Текстовое поле UI: Статус:."
  },
  {
    "id": "756dabf575da1d7c",
    "type": "ui_text",
    "z": "db277a3598de4f9a",
    "group": "6a2db91e5da38c6d",
    "order": 3,
    "width": 6,
    "height": 1,
    "name": "Глобальный Этап Цикла",
    "label": "Этап Цикла:",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "x": 650,
    "y": 180,
    "wires": [],
    "info": "Текстовое поле UI: Этап Цикла:."
  },
  {
    "id": "af0706fa3d32a680",
    "type": "inject",
    "z": "db277a3598de4f9a",
    "name": "Обновление Статуса (раз в 1с)",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "1",
    "crontab": "",
    "once": true,
    "onceDelay": "2",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 180,
    "y": 40,
    "wires": [
      [
        "dbc7ff62dda24e07"
      ]
    ],
    "info": "Триггер (Inject): Обновление Статуса (раз в 1с).\nНазначение: периодическая или одноразовая генерация сообщений."
  },
  {
    "id": "dbc7ff62dda24e07",
    "type": "change",
    "z": "db277a3598de4f9a",
    "name": "Получить Глобальный Текст Этапа",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "global_cycle_stage_text",
        "tot": "global"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 570,
    "y": 40,
    "wires": [
      [
        "756dabf575da1d7c"
      ]
    ],
    "info": "Узел типа change."
  },
  {
    "id": "cfb9041eaff623d1",
    "type": "ui_switch",
    "z": "db277a3598de4f9a",
    "name": "Режим управления клапаном",
    "label": "Режим управления клапаном:",
    "tooltip": "Включает или отключает кнопки ручного управления",
    "group": "07f6971db111ea65",
    "order": 1,
    "width": 6,
    "height": 1,
    "passthru": false,
    "decouple": "true",
    "topic": "topic",
    "topicType": "msg",
    "style": "",
    "onvalue": "true",
    "onvalueType": "bool",
    "offvalue": "false",
    "offvalueType": "bool",
    "x": 210,
    "y": 360,
    "wires": [
      [
        "b8f9b31dbc535102"
      ]
    ],
    "info": "Переключатель: Режим управления клапаном:.\nНазначение: включение/выключение функции."
  },
  {
    "id": "b8f9b31dbc535102",
    "type": "function",
    "z": "db277a3598de4f9a",
    "name": "Управление доступностью кнопок",
    "func": "// UI switch for manual/auto valve mode\n// msg.payload is boolean: true for manual mode, false for auto mode\nconst isManual = msg.payload === true;\n// Determine whether this message originated from the UI (dashboard).\n// UI messages include a socketid property; messages injected from the HMI via link-in do not.\nconst fromUi = msg.socketid !== undefined;\n// Compute numerical flag for manual mode (0 = auto, 1 = manual)\nconst modeVal = isManual ? 1.0 : 0.0;\nconst __t_prof = Date.now();\n// Prepare global flags to update via link-out\nconst flags = { HMI_ManualMode: modeVal };\n// Always update the global manual mode immediately to avoid race conditions\nglobal.set('HMI_ManualMode', modeVal);\n// When entering manual mode from the dashboard (not from HMI), copy the current valve state\n// into HMI_ManualValveState so that manual control starts from the current state.\nif (isManual && fromUi) {\n    const currentKl = global.get('kl');\n    const v = (currentKl === 1 || currentKl === 0) ? currentKl : 0;\n    global.set('HMI_ManualValveState', v);\n    flags.HMI_ManualValveState = v;\n}\n// Control enabled state of manual open/close buttons\nmsg.enabled = isManual;\n// Show execution timing in node status (for diagnostics)\nnode.status({fill:'blue',shape:'ring',text:(Date.now()-__t_prof)+' ms'});\n// Return two outputs: one to enable/disable buttons (with cleaned payload downstream),\n// and another to update global flags via the link-out node.\nreturn [msg, { setGlobal: flags }];",
    "outputs": 2,
    "noerr": 0,
    "initialize": "// При запуске или развертывании отправляем сообщение,\n// чтобы выключить кнопки по умолчанию.\nnode.send({ enabled: false });",
    "finalize": "",
    "libs": [],
    "x": 490,
    "y": 360,
    "wires": [
      [
        "e0ef0bfb43cd4c56"
      ],
      [
        "86f5cac56a824656"
      ]
    ],
    "info": "Функция: Управление доступностью кнопок.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "5ddca554b43e5d93",
    "type": "link in",
    "z": "db277a3598de4f9a",
    "name": "update-cryst-status",
    "links": [
      "4817c8072563ef41",
      "0b3754dc68c88245"
    ],
    "x": 225,
    "y": 100,
    "wires": [
      [
        "78bdbf73baa82ffe"
      ]
    ],
    "info": "Входная связь между потоками Node-RED."
  },
  {
    "id": "d681857a6a010ff8",
    "type": "ui_button",
    "z": "db277a3598de4f9a",
    "name": "Перезапуск Цикла",
    "group": "6a2db91e5da38c6d",
    "order": 1,
    "width": 3,
    "height": 1,
    "passthru": true,
    "label": "Перезапуск Цикла",
    "tooltip": "Принудительный сброс логики процесса кристаллизации",
    "color": "",
    "bgcolor": "#dd6e00",
    "className": "",
    "icon": "fa-refresh",
    "payload": "reset",
    "payloadType": "str",
    "topic": "reset_cryst_cycle",
    "topicType": "str",
    "x": 250,
    "y": 220,
    "wires": [
      [
        "aa8b78a6e9c5233f"
      ]
    ],
    "info": "Кнопка на панели: Перезапуск Цикла.\nНазначение: взаимодействие с пользователем."
  },
  {
    "id": "aa8b78a6e9c5233f",
    "type": "link out",
    "z": "db277a3598de4f9a",
    "name": "link out: trigger-cryst-reset",
    "mode": "link",
    "links": [
      "75734ed2e182fad5"
    ],
    "x": 395,
    "y": 200,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "ce11cb4b50dfc48f",
    "type": "link in",
    "z": "db277a3598de4f9a",
    "name": "hmi_manual_switch_sync",
    "links": [
      "f3ca579116464c52"
    ],
    "x": 325,
    "y": 460,
    "wires": [
      [
        "cfb9041eaff623d1",
        "b8f9b31dbc535102"
      ]
    ],
    "info": "Входная связь между потоками Node-RED."
  },
  {
    "id": "ba649f4e2e695482",
    "type": "ui_button",
    "z": "db277a3598de4f9a",
    "name": "ВКЛ. Клапан",
    "group": "07f6971db111ea65",
    "order": 2,
    "width": 3,
    "height": 1,
    "passthru": false,
    "label": "Включить клапан",
    "tooltip": "",
    "color": "",
    "bgcolor": "green",
    "icon": "power_settings_new",
    "payload": "1",
    "payloadType": "num",
    "topic": "manual_kl",
    "topicType": "str",
    "x": 770,
    "y": 360,
    "wires": [
      [
        "3bbbc3b7542dd917"
      ]
    ],
    "info": "Кнопка на панели: Включить клапан.\nНазначение: взаимодействие с пользователем."
  },
  {
    "id": "907964d19ad905c3",
    "type": "ui_button",
    "z": "db277a3598de4f9a",
    "name": "ВЫКЛ. Клапан",
    "group": "07f6971db111ea65",
    "order": 3,
    "width": 3,
    "height": 1,
    "passthru": false,
    "label": "Выключить клапан",
    "tooltip": "",
    "color": "",
    "bgcolor": "red",
    "icon": "power_settings_new",
    "payload": "0",
    "payloadType": "num",
    "topic": "manual_kl",
    "topicType": "str",
    "x": 780,
    "y": 420,
    "wires": [
      [
        "3bbbc3b7542dd917"
      ]
    ],
    "info": "Кнопка на панели: Выключить клапан.\nНазначение: взаимодействие с пользователем."
  },
  {
    "id": "3bbbc3b7542dd917",
    "type": "function",
    "z": "db277a3598de4f9a",
    "name": "Обновление состояния клапана",
    "func": "// Handle manual valve toggle from UI\n// msg.payload contains 1 (ON) or 0 (OFF)\n// Set source to 'manual' and pass through to subflow\nconst valveState = Number(msg.payload) ? 1 : 0;\nmsg.payload = valveState;\nmsg.source = 'manual';\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 400,
    "y": 520,
    "wires": [
      [
        "0b3c007f8b43d830"
      ]
    ],
    "info": "Функция: Обновление состояния клапана.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "0b3c007f8b43d830",
    "type": "link out",
    "z": "db277a3598de4f9a",
    "name": "link out: manual_valve_control",
    "mode": "link",
    "links": [
      "7827fe2d9d55b007"
    ],
    "x": 1125,
    "y": 440,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "f84522bfe48287c3",
    "type": "link out",
    "z": "db277a3598de4f9a",
    "name": "К физическому клапану",
    "mode": "link",
    "links": [
      "7827fe2d9d55b007"
    ],
    "x": 805,
    "y": 220,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "eae2053618e8cbaf",
    "type": "link in",
    "z": "db277a3598de4f9a",
    "name": "link in: trigger-cryst-reset",
    "links": [
      "0fd6bcdfd846f848"
    ],
    "x": 55,
    "y": 140,
    "wires": [
      [
        "d681857a6a010ff8"
      ]
    ],
    "info": "Входная связь между потоками Node-RED."
  },
  {
    "id": "c38923521f501ba4",
    "type": "ui_text",
    "z": "db277a3598de4f9a",
    "group": "07f6971db111ea65",
    "order": 4,
    "width": 3,
    "height": 1,
    "name": "Индикатор Клапана",
    "label": "Клапан (состояние):",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "x": 1020,
    "y": 280,
    "wires": [],
    "info": "Текстовое поле UI: Клапан (состояние):."
  },
  {
    "id": "35cad03308bd1268",
    "type": "inject",
    "z": "db277a3598de4f9a",
    "name": "Обновлять состояние клапана (poll)",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "1",
    "crontab": "",
    "once": true,
    "onceDelay": 1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 460,
    "y": 420,
    "wires": [
      [
        "17013db5d7ea6630"
      ]
    ],
    "info": "Периодический инжект: каждую секунду инициирует обновление состояния клапана на UI"
  },
  {
    "id": "17013db5d7ea6630",
    "type": "change",
    "z": "db277a3598de4f9a",
    "name": "Чтение global.kl (poll)",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "kl",
        "tot": "global"
      }
    ],
    "x": 710,
    "y": 420,
    "wires": [
      [
        "c38923521f501ba4"
      ]
    ],
    "info": "Берёт значение kl из global и отправляет его в индикатор"
  },
  {
    "id": "e01555558827a070",
    "type": "ui_button",
    "z": "f60d96b31f20271a",
    "name": "Считать",
    "group": "09a62aae158d5450",
    "order": 1,
    "width": 4,
    "height": 1,
    "passthru": false,
    "label": "Считать",
    "tooltip": "Считать параметры из файла",
    "icon": "fa-download",
    "payload": "read",
    "payloadType": "str",
    "topic": "read_cryst_vars",
    "x": 160,
    "y": 100,
    "wires": [
      [
        "839511af3fc8ca33"
      ]
    ],
    "info": "Кнопка на панели: Считать.\nНазначение: взаимодействие с пользователем."
  },
  {
    "id": "5dc1592d6e26bded",
    "type": "ui_button",
    "z": "f60d96b31f20271a",
    "name": "Применить и Сохранить",
    "group": "09a62aae158d5450",
    "order": 2,
    "width": 4,
    "height": 1,
    "passthru": false,
    "label": "Применить и Сохранить",
    "tooltip": "Применить изменения, сохранить в файл",
    "color": "",
    "bgcolor": "green",
    "icon": "fa-save",
    "payload": "write",
    "payloadType": "str",
    "topic": "apply_save_cryst_vars",
    "x": 170,
    "y": 160,
    "wires": [
      [
        "ac7d999b5b40ee44"
      ]
    ],
    "info": "Кнопка на панели: Применить и Сохранить.\nНазначение: взаимодействие с пользователем."
  },
  {
    "id": "e1783aee6774f4ab",
    "type": "link in",
    "z": "f60d96b31f20271a",
    "name": "link in: refresh-cryst-ui",
    "links": [
      "e5f354f840e61f82",
      "2f974e4eb8acf7a0",
      "46d2537a0c338453"
    ],
    "x": 175,
    "y": 280,
    "wires": [
      [
        "2acf20f4a0074588"
      ]
    ],
    "info": "Входная связь между потоками Node-RED."
  },
  {
    "id": "839511af3fc8ca33",
    "type": "link out",
    "z": "f60d96b31f20271a",
    "name": "cryst_link_out_read_btn",
    "mode": "link",
    "links": [
      "b03bc725d31137d0"
    ],
    "x": 375,
    "y": 100,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "ac7d999b5b40ee44",
    "type": "link out",
    "z": "f60d96b31f20271a",
    "name": "cryst_link_out_apply_btn",
    "mode": "link",
    "links": [
      "29648253e1a49a43"
    ],
    "x": 375,
    "y": 160,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "4817c8072563ef41",
    "type": "link out",
    "z": "f60d96b31f20271a",
    "name": "link out: update-cryst-status",
    "mode": "link",
    "links": [
      "5ddca554b43e5d93"
    ],
    "x": 935,
    "y": 420,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "733e337acc1ca46a",
    "type": "ui_button",
    "z": "7e656866ddfe4855",
    "name": "Обновить Архив",
    "group": "b2b4f45e0e161f86",
    "order": 1,
    "width": 12,
    "height": 1,
    "passthru": false,
    "label": "Показать / Обновить Архив",
    "tooltip": "Загрузить и показать данные из файла архива",
    "icon": "fa-history",
    "payload": "",
    "payloadType": "str",
    "topic": "trigger",
    "x": 150,
    "y": 160,
    "wires": [
      [
        "1ab49bfc9e08034e"
      ]
    ],
    "info": "Кнопка на панели: Показать / Обновить Архив.\nНазначение: взаимодействие с пользователем."
  },
  {
    "id": "c2f5bc7d3a1e91f0",
    "type": "inject",
    "z": "7e656866ddfe4855",
    "name": "Автообновление архива",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "3600",
    "crontab": "",
    "once": true,
    "onceDelay": 1,
    "topic": "",
    "payload": "",
    "payloadType": "str",
    "x": 180,
    "y": 220,
    "wires": [
      [
        "1ab49bfc9e08034e"
      ]
    ],
    "info": "Триггер (Inject): ежечасная автоматическая загрузка архива и начальный запуск после старта проекта."
  },
  {
    "id": "d50b57dfa192ab02",
    "type": "ui_table",
    "z": "7e656866ddfe4855",
    "group": "b0b7e10734f2db62",
    "order": 1,
    "width": 12,
    "height": 8,
    "columns": [
      {
        "field": "Timestamp",
        "title": "Дата и время",
        "width": "160",
        "align": "left",
        "formatter": "plaintext"
      },
      {
        "field": "Tkr_C",
        "title": "Tкр, °C",
        "width": "",
        "align": "center",
        "formatter": "plaintext"
      },
      {
        "field": "Cwater_percent",
        "title": "Вода, %",
        "width": "",
        "align": "center",
        "formatter": "plaintext"
      }
    ],
    "outputs": 0,
    "cts": false,
    "x": 1230,
    "y": 420,
    "wires": [],
    "info": "Узел типа ui_table."
  },
  {
    "id": "bf1d2632e8426249",
    "type": "function",
    "z": "7e656866ddfe4855",
    "name": "Форматирование для графика",
    "func": "let ymin = flow.get('ymin');\nlet ymax = flow.get('ymax');\nlet t_start = flow.get('t_start');\nlet t_end = flow.get('t_end');\n\nconst parsedData = msg.payload;\n\n// Диапазон Y: пусто → авто, перепутаны → поменять местами\nymin = (ymin === undefined || ymin === null || ymin === '') ? -Infinity : parseFloat(ymin);\nymax = (ymax === undefined || ymax === null || ymax === '') ?  Infinity : parseFloat(ymax);\nif (Number.isFinite(ymin) && Number.isFinite(ymax) && ymin > ymax) { const tmp = ymin; ymin = ymax; ymax = tmp; }\n\n// Парсер времени, принимающий 'YYYY-MM-DD HH:mm:ss' и ISO\nfunction parseTs(s) {\n  const ss = (s || '').trim();\n  if (!ss) return NaN;\n  const iso = ss.includes('T') ? ss : ss.replace(' ', 'T');\n  const t = Date.parse(iso);\n  return Number.isFinite(t) ? t : NaN;\n}\n\nconst startDate = t_start ? parseTs(t_start) : -Infinity;\nconst endDate   = t_end   ? parseTs(t_end)   :  Infinity;\n\nconst tkrSeriesData = [];\nconst cwaterSeriesData = [];\n\nif (Array.isArray(parsedData)) {\n  parsedData.forEach(row => {\n    const tkrValue = parseFloat(row.Tkr_C);\n    const cwaterValue = parseFloat(row.Cwater_percent);\n    const timestamp = parseTs(row.Timestamp);\n\n    if (Number.isFinite(timestamp)) {\n      if (timestamp >= startDate && timestamp <= endDate) {\n        if (Number.isFinite(tkrValue) && tkrValue >= ymin && tkrValue <= ymax) {\n          tkrSeriesData.push({ x: timestamp, y: tkrValue });\n        }\n        if (Number.isFinite(cwaterValue) && cwaterValue >= ymin && cwaterValue <= ymax) {\n          cwaterSeriesData.push({ x: timestamp, y: cwaterValue });\n        }\n      }\n    }\n  });\n}\n\nmsg.payload = [{\n  series: [\"Tкр, °C\", \"Вода, %\"],\n  data: [tkrSeriesData, cwaterSeriesData],\n  labels: [\"\"]\n}];\nreturn msg;",
    "outputs": 1,
    "x": 1130,
    "y": 220,
    "wires": [
      [
        "f0b9b5811b502388"
      ]
    ],
    "info": "Функция: Форматирование для графика.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "f0b9b5811b502388",
    "type": "ui_chart",
    "z": "7e656866ddfe4855",
    "name": "График Архива",
    "group": "b0b7e10734f2db62",
    "order": 2,
    "width": 12,
    "height": 8,
    "label": "История процесса из архива",
    "chartType": "line",
    "legend": "true",
    "xformat": "HH:mm:ss\\nDD.MM.YY",
    "interpolate": "linear",
    "nodata": "Нет данных в архиве",
    "dot": true,
    "ymin": "",
    "ymax": "",
    "removeOlder": 0,
    "removeOlderPoints": "",
    "removeOlderUnit": "3600",
    "colors": [
      "#1f77b4",
      "#ff7f0e",
      "#2ca02c",
      "#d62728",
      "#9467bd",
      "#8c564b",
      "#e377c2",
      "#7f7f7f"
    ],
    "outputs": 1,
    "useDifferentColor": true,
    "x": 1460,
    "y": 240,
    "wires": [
      []
    ],
    "info": "График UI: История процесса из архива."
  },
  {
    "id": "f85b64378c13d1bf",
    "type": "ui_text_input",
    "z": "7e656866ddfe4855",
    "name": "Мин. значение Y",
    "label": "Мин. значение Y",
    "tooltip": "Оставьте пустым для авто-масштаба",
    "group": "b2b4f45e0e161f86",
    "order": 2,
    "width": 6,
    "height": 1,
    "passthru": false,
    "mode": "number",
    "delay": 500,
    "topic": "ymin",
    "sendOnBlur": true,
    "x": 480,
    "y": 100,
    "wires": [
      [
        "6d2eb83d6aa45215"
      ]
    ],
    "info": "Узел типа ui_text_input."
  },
  {
    "id": "6d2eb83d6aa45215",
    "type": "change",
    "z": "7e656866ddfe4855",
    "name": "Сохранить ymin",
    "rules": [
      {
        "t": "set",
        "p": "ymin",
        "pt": "flow",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 700,
    "y": 100,
    "wires": [
      []
    ],
    "info": "Узел типа change."
  },
  {
    "id": "6056a3a0c1e0c26b",
    "type": "ui_text_input",
    "z": "7e656866ddfe4855",
    "name": "Макс. значение Y",
    "label": "Макс. значение Y",
    "tooltip": "Оставьте пустым для авто-масштаба",
    "group": "b2b4f45e0e161f86",
    "order": 3,
    "width": 6,
    "height": 1,
    "passthru": false,
    "mode": "number",
    "delay": 500,
    "topic": "ymax",
    "sendOnBlur": true,
    "x": 480,
    "y": 140,
    "wires": [
      [
        "fbd594b13105671a"
      ]
    ],
    "info": "Узел типа ui_text_input."
  },
  {
    "id": "fbd594b13105671a",
    "type": "change",
    "z": "7e656866ddfe4855",
    "name": "Сохранить ymax",
    "rules": [
      {
        "t": "set",
        "p": "ymax",
        "pt": "flow",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 700,
    "y": 140,
    "wires": [
      []
    ],
    "info": "Узел типа change."
  },
  {
    "id": "d7cdc9c8cf99c5db",
    "type": "link in",
    "z": "7e656866ddfe4855",
    "name": "trigger: set-default-filter",
    "links": [
      "1f6618c06f8081c7"
    ],
    "x": 345,
    "y": 120,
    "wires": [
      [
        "f85b64378c13d1bf",
        "6056a3a0c1e0c26b"
      ]
    ],
    "info": "Входная связь между потоками Node-RED."
  },
  {
    "id": "e23035def121a26b",
    "type": "csv",
    "z": "7e656866ddfe4855",
    "name": "Парсинг CSV",
    "sep": ";",
    "hdrin": true,
    "hdrout": "none",
    "multi": "mult",
    "ret": "\\n",
    "temp": "",
    "skip": "0",
    "strings": true,
    "x": 960,
    "y": 420,
    "wires": [
      [
        "bf1d2632e8426249",
        "d50b57dfa192ab02"
      ]
    ],
    "info": "Парсинг или генерация CSV-данных."
  },
  {
    "id": "95c3666d39f96685",
    "type": "ui_dropdown",
    "z": "7e656866ddfe4855",
    "name": "Выбор дня",
    "label": "Выберите день архива",
    "tooltip": "Выберите число месяца для просмотра данных",
    "place": "Выберите день",
    "group": "b2b4f45e0e161f86",
    "order": 4,
    "width": 6,
    "height": 1,
    "passthru": true,
    "multiple": false,
    "options": [
      {
        "label": "1",
        "value": "1",
        "type": "str"
      },
      {
        "label": "2",
        "value": "2",
        "type": "str"
      },
      {
        "label": "3",
        "value": "3",
        "type": "str"
      },
      {
        "label": "4",
        "value": "4",
        "type": "str"
      },
      {
        "label": "5",
        "value": "5",
        "type": "str"
      },
      {
        "label": "6",
        "value": "6",
        "type": "str"
      },
      {
        "label": "7",
        "value": "7",
        "type": "str"
      },
      {
        "label": "8",
        "value": "8",
        "type": "str"
      },
      {
        "label": "9",
        "value": "9",
        "type": "str"
      },
      {
        "label": "10",
        "value": "10",
        "type": "str"
      },
      {
        "label": "11",
        "value": "11",
        "type": "str"
      },
      {
        "label": "12",
        "value": "12",
        "type": "str"
      },
      {
        "label": "13",
        "value": "13",
        "type": "str"
      },
      {
        "label": "14",
        "value": "14",
        "type": "str"
      },
      {
        "label": "15",
        "value": "15",
        "type": "str"
      },
      {
        "label": "16",
        "value": "16",
        "type": "str"
      },
      {
        "label": "17",
        "value": "17",
        "type": "str"
      },
      {
        "label": "18",
        "value": "18",
        "type": "str"
      },
      {
        "label": "19",
        "value": "19",
        "type": "str"
      },
      {
        "label": "20",
        "value": "20",
        "type": "str"
      },
      {
        "label": "21",
        "value": "21",
        "type": "str"
      },
      {
        "label": "22",
        "value": "22",
        "type": "str"
      },
      {
        "label": "23",
        "value": "23",
        "type": "str"
      },
      {
        "label": "24",
        "value": "24",
        "type": "str"
      },
      {
        "label": "25",
        "value": "25",
        "type": "str"
      },
      {
        "label": "26",
        "value": "26",
        "type": "str"
      },
      {
        "label": "27",
        "value": "27",
        "type": "str"
      },
      {
        "label": "28",
        "value": "28",
        "type": "str"
      },
      {
        "label": "29",
        "value": "29",
        "type": "str"
      },
      {
        "label": "30",
        "value": "30",
        "type": "str"
      },
      {
        "label": "31",
        "value": "31",
        "type": "str"
      }
    ],
    "payload": "",
    "topic": "selected_day",
    "topicType": "str",
    "className": "",
    "x": 250,
    "y": 540,
    "wires": [
      [
        "79cebe584de2151c"
      ]
    ],
    "info": "Узел типа ui_dropdown."
  },
  {
    "id": "79cebe584de2151c",
    "type": "change",
    "z": "7e656866ddfe4855",
    "name": "Сохранить выбранный день",
    "rules": [
      {
        "t": "set",
        "p": "selected_archive_day",
        "pt": "flow",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 580,
    "y": 540,
    "wires": [
      []
    ],
    "info": "Узел типа change."
  },
  {
    "id": "2d25228225c249b4",
    "type": "ui_toast",
    "z": "7e656866ddfe4855",
    "position": "top right",
    "displayTime": "3",
    "highlight": "red",
    "sendall": true,
    "outputs": 0,
    "ok": "OK",
    "cancel": "",
    "raw": false,
    "topic": "Ошибка",
    "name": "Уведомление: Файл не найден",
    "x": 1010,
    "y": 660,
    "wires": [],
    "info": "Узел типа ui_toast."
  },
  {
    "id": "2efe458384d8891e",
    "type": "change",
    "z": "7e656866ddfe4855",
    "name": "Формат сообщения об ошибке",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "Архив за выбранный день не найден!",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1230,
    "y": 580,
    "wires": [
      [
        "2d25228225c249b4"
      ]
    ],
    "info": "Узел типа change."
  },
  {
    "id": "1ab49bfc9e08034e",
    "type": "function",
    "z": "7e656866ddfe4855",
    "name": "Прочитать и вывести архив",
    "func": "// Получаем доступ к модулю 'fs', который мы разрешили в settings.js\nconst fs = global.get('fs');\n\n// Проверяем, что модуль fs доступен\nif (!fs || !fs.readFileSync) {\n    node.error(\"КРИТИЧЕСКАЯ ОШИБКА: Модуль 'fs' не доступен. Проверьте файл settings.js и перезапустите Node-RED.\");\n    return null;\n}\n\n// Получаем выбранный день из контекста потока\nlet selectedDay = flow.get('selected_archive_day');\n\n// Если день не выбран, по умолчанию используем текущий день\nif (!selectedDay) {\n    selectedDay = new Date().getDate();\n}\n\nconst fileName = `archive_${selectedDay}.csv`;\nconst filePath = '/home/root/.node-red/archives/' + fileName;\n\ntry {\n    // Проверяем, существует ли файл, прежде чем пытаться его прочитать\n    if (fs.existsSync(filePath)) {\n        // Читаем содержимое файла напрямую с помощью модуля fs\n        const fileContent = fs.readFileSync(filePath, 'utf8');\n        msg.payload = fileContent;\n        // Отправляем содержимое файла на ПЕРВЫЙ выход (для парсинга в CSV)\n        return [ msg, null ]; \n    } else {\n        // Если файл не существует, отправляем сообщение на ВТОРОЙ выход, чтобы вызвать уведомление\n        return [ null, { payload: `Архив за день ${selectedDay} не найден!` } ];\n    }\n} catch (e) {\n    // Ловим любые другие потенциальные ошибки во время чтения файла\n    node.error(`[Reader] Ошибка во время операции чтения файла: ${e.message}`);\n    return [ null, { payload: `Ошибка при чтении файла: ${e.message}` } ];\n}",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1040,
    "y": 800,
    "wires": [
      [
        "e23035def121a26b"
      ],
      [
        "2efe458384d8891e"
      ]
    ],
    "info": "Функция: Прочитать и вывести архив.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "8fe167c129d8bed7",
    "type": "function",
    "z": "f4b9db0f497b9f54",
    "name": "Старт/Стоп симуляции",
    "func": "const isSimulating = msg.payload;\nglobal.set('simulation_mode', isSimulating);\n\nif (isSimulating) {\n    // Если симуляцию ВКЛЮЧИЛИ, сбрасываем ее в начальное состояние\n    flow.set('sim_state', { temp: 25, phase: 'HEATING' });\n    node.status({fill: 'green', shape:'dot', text: 'Симуляция ВКЛ'});\n} else {\n    // Если ВЫКЛЮЧИЛИ, ставим на паузу (в IDLE)\n    flow.set('sim_state', { temp: 25, phase: 'IDLE' });\n    node.status({fill: 'red', shape:'dot', text: 'Симуляция ВЫКЛ'});\n}\n\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "global.set('simulation_mode', false);\nflow.set('sim_state', { temp: 25, phase: 'IDLE' });\nnode.status({fill:'red', shape:'dot', text: 'Симуляция ВЫКЛ'});",
    "finalize": "",
    "libs": [],
    "x": 630,
    "y": 100,
    "wires": [
      []
    ],
    "info": "Функция: Старт/Стоп симуляции.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "880f0ddf288d101e",
    "type": "inject",
    "z": "f4b9db0f497b9f54",
    "name": "Таймер симуляции (200мс)",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "0.2",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "tick",
    "payloadType": "str",
    "x": 240,
    "y": 180,
    "wires": [
      [
        "f51f6697327ea19d"
      ]
    ],
    "info": "Триггер (Inject): Таймер симуляции (200мс).\nНазначение: периодическая или одноразовая генерация сообщений."
  },
  {
    "id": "2672a354f0030475",
    "type": "link out",
    "z": "f4b9db0f497b9f54",
    "name": "simulated_temp_output",
    "mode": "link",
    "links": [
      "2c6464b3953560b2"
    ],
    "x": 975,
    "y": 140,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "b1386c8f1e4484f3",
    "type": "ui_chart",
    "z": "f4b9db0f497b9f54",
    "group": "SIM_GROUP_002",
    "order": 0,
    "width": "12",
    "height": "8",
    "label": "Кривая симуляции",
    "chartType": "line",
    "legend": "false",
    "xformat": "HH:mm:ss",
    "interpolate": "linear",
    "nodata": "",
    "dot": false,
    "ymin": "",
    "ymax": "",
    "removeOlder": "1",
    "removeOlderPoints": "",
    "removeOlderUnit": "60",
    "cutout": 0,
    "useOneColor": false,
    "useUTC": false,
    "colors": [
      "#1f77b4",
      "#aec7e8",
      "#ff7f0e",
      "#ffbb78",
      "#2ca02c",
      "#98df8a",
      "#d62728",
      "#ff9896"
    ],
    "outputs": 1,
    "useDifferentColor": false,
    "x": 1090,
    "y": 240,
    "wires": [
      []
    ],
    "info": "График UI: Кривая симуляции."
  },
  {
    "id": "f0069e97b7785005",
    "type": "inject",
    "z": "f4b9db0f497b9f54",
    "name": "Установить \"Выкл.\" при старте",
    "props": [
      {
        "p": "payload",
        "v": "false",
        "vt": "bool"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": "0.5",
    "topic": "",
    "x": 190,
    "y": 40,
    "wires": [
      []
    ],
    "info": "Триггер (Inject): Установить \"Выкл.\" при старте.\nНазначение: периодическая или одноразовая генерация сообщений."
  },
  {
    "id": "13f45c8962587d90",
    "type": "ui_switch",
    "z": "f4b9db0f497b9f54",
    "name": "Тумблер симуляции кривой",
    "label": "Симуляция кривой:",
    "tooltip": "Включает/выключает генерацию кривой",
    "group": "SIM_GROUP_001",
    "order": 1,
    "width": 6,
    "height": 1,
    "passthru": true,
    "decouple": "false",
    "topic": "",
    "topicType": "str",
    "style": "",
    "onvalue": true,
    "onvalueType": "bool",
    "offvalue": false,
    "offvalueType": "bool",
    "x": 330,
    "y": 100,
    "wires": [
      [
        "8fe167c129d8bed7"
      ]
    ],
    "info": "Переключатель: Симуляция кривой:.\nНазначение: включение/выключение функции."
  },
  {
    "id": "f51f6697327ea19d",
    "type": "function",
    "z": "f4b9db0f497b9f54",
    "name": "Генератор кривой охлаждения (simple)",
    "func": "// Генерация T в симуляции. Работает только когда global.simulation_mode = true\nif (!global.get('simulation_mode')) return null;\n\n// Состояние\nlet s = flow.get('sim_state') || { temp: 25, phase: 'HEATING', pauseStart: 0, plateauStart: 0, onPlateau: false };\n\n// Параметры\nconst userTmax = Number(global.get('Tmax')) || 170;\nconst Tmax = userTmax + 3; // верхняя температура с перегревом\nconst Tmin = Number(global.get('Tmin')) || 50;\nconst tau_p = Number(global.get('tau_p')) || 2;      // пауза на вершине, сек\nconst defaultPlateauDiff = 18;                       // разница между Tmax и Tplateau (15–20 °C)\nconst Tplateau = Number(global.get('Tplateau')) || (userTmax - defaultPlateauDiff);\nconst tau_pl = Number(global.get('tau_pl')) || 5;    // длительность плато, сек\nconst plateauAmp = Number(global.get('plateauAmp')) || 2;\n\nconst speed = flow.get('sim_speed') || 1;\nconst tau_cool = Number(global.get('tau_cool')) || 40;  // максимальная длительность охлаждения после плато, сек\n\n// Скорости и экспоненты\nconst vHeat = 0.6 / speed;   // скорость нагрева (°C/шаг)\nconst k1 = 0.05 / speed;     // коэффициент экспоненциального охлаждения до плато\nconst k2 = 0.03 / speed;     // коэффициент экспоненциального охлаждения после плато\n\nswitch (s.phase) {\n    case 'HEATING':\n        s.temp += vHeat;\n        if (s.temp >= Tmax) {\n            s.phase = 'PAUSE';\n            s.pauseStart = Date.now();\n        }\n        break;\n    case 'PAUSE':\n        if ((Date.now() - s.pauseStart) >= tau_p * 1000 * speed) {\n            s.phase = 'COOLING';\n            s.onPlateau = false;\n        }\n        break;\n    case 'COOLING':\n        // экспоненциальное охлаждение до плато\n        s.temp = s.temp - (s.temp - Tplateau) * k1;\n        if (s.temp <= Tplateau + 0.5) {\n            s.onPlateau = true;\n            s.phase = 'PLATEAU';\n            s.plateauStart = Date.now();\n        }\n        break;\n    case 'PLATEAU':\n        // случайная флуктуация вокруг Tplateau\n        s.temp = Tplateau + (Math.random() * 2 - 1) * plateauAmp;\n        if ((Date.now() - s.plateauStart) >= tau_pl * 1000 * speed) {\n            s.phase = 'COOLING2';\n        }\n        break;\n    case 'COOLING2':\n        // экспоненциальное охлаждение после плато\n        if (!s.cooling2Start) { s.cooling2Start = Date.now(); }\n        s.temp = s.temp - (s.temp - Tmin) * k2;\n        if (s.temp <= Tmin + 0.5 || ((Date.now() - s.cooling2Start) >= tau_cool * 1000)) {\n            s.phase = 'HEATING';\n            delete s.cooling2Start;\n        }\n        break;\n    default:\n        s.phase = 'HEATING';\n}\n\nflow.set('sim_state', s);\nreturn [\n    { payload: s.temp, topic: 'Температура' },\n    { payload: s.temp }\n];\n",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 660,
    "y": 180,
    "wires": [
      [
        "b1386c8f1e4484f3"
      ],
      [
        "2672a354f0030475"
      ]
    ],
    "info": "Функция: Генератор кривой охлаждения (simple).\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "2607d49c34fbb225",
    "type": "ui_slider",
    "z": "f4b9db0f497b9f54",
    "name": "Регулятор скорости симуляции",
    "label": "Скорость симуляции:",
    "tooltip": "1 = быстро, 10 = медленно",
    "group": "SIM_GROUP_001",
    "order": 2,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "",
    "topicType": "str",
    "min": 1,
    "max": 10,
    "step": 1,
    "className": "",
    "x": 330,
    "y": 140,
    "wires": [
      [
        "81a9a4b4900eaeb4"
      ]
    ],
    "info": "Узел типа ui_slider."
  },
  {
    "id": "81a9a4b4900eaeb4",
    "type": "function",
    "z": "f4b9db0f497b9f54",
    "name": "Установить скорость симуляции",
    "func": "flow.set(\"sim_speed\", msg.payload); return null;",
    "outputs": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 560,
    "y": 140,
    "wires": [],
    "info": "Функция: Установить скорость симуляции.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "15c5ed0a0f1eb945",
    "type": "inject",
    "z": "f4b9db0f497b9f54",
    "name": "Установить скорость по умолчанию",
    "props": [
      {
        "p": "payload",
        "v": 5,
        "vt": "num"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": "0.1",
    "topic": "",
    "x": 110,
    "y": 140,
    "wires": [
      [
        "81a9a4b4900eaeb4"
      ]
    ],
    "info": "Триггер (Inject): Установить скорость по умолчанию.\nНазначение: периодическая или одноразовая генерация сообщений."
  },
  {
    "id": "d04e6759b8ddad37",
    "type": "get-ai-value",
    "z": "e8bc55b391f479e3",
    "name": "1. Чтение AI",
    "x": 430,
    "y": 140,
    "wires": [
      [],
      [],
      [
        "43fae219d85e6bbb"
      ],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      [],
      []
    ],
    "info": "Узел типа get-ai-value."
  },
  {
    "id": "75734ed2e182fad5",
    "type": "link in",
    "z": "e8bc55b391f479e3",
    "name": "link in: trigger-cryst-reset",
    "links": [
      "aa8b78a6e9c5233f"
    ],
    "x": 655,
    "y": 300,
    "wires": [
      [
        "80af09c5430ed80b"
      ]
    ],
    "info": "Входная связь между потоками Node-RED."
  },
  {
    "id": "cd317c35ca04fd8c",
    "type": "function",
    "z": "e8bc55b391f479e3",
    "name": "Разделить и Округлить",
    "func": "const values = msg.payload;\nconst outputs = [];\nconst topics = [\n    'Tn', 'tgn', 'Tgnn', 'tgnn', 'Ttgnn', 'tgnk', 'Ttgnk',\n    'tau_z', 'kod', 'kl', 'Tkr', 'Cmasv', 'Cwater_at_Tmax', 'Cwater_at_Tmin'\n];\ntopics.forEach(topic => {\n    let value = values[topic];\n    if (typeof value === 'number') {\n        if (topic === 'Tn') {\n            value = Math.round(value * 10) / 10;\n        } else {\n            value = Math.round(value * 1000) / 1000;\n        }\n    } else if (value === null || value === undefined) {\n        value = \"---\";\n    }\n    outputs.push({ payload: value });\n});\nreturn outputs;",
    "outputs": 14,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 910,
    "y": 460,
    "wires": [
      [
        "9d7c36a1fc54861d",
        "3324bdba28174adc"
      ],
      [
        "3d3c492b466937f9",
        "0ba4bdb3b61fce68"
      ],
      [
        "f4ba99feee20bcdf"
      ],
      [
        "725fb6094093f26c"
      ],
      [
        "b00c17818dd7c8d8"
      ],
      [
        "0c39727fb45bd2cf"
      ],
      [
        "08c6ba6473e9b2d0"
      ],
      [
        "d1877d9164f11fa3"
      ],
      [
        "aa2b951f0606d599"
      ],
      [],
      [
        "5b322bf85f002b89",
        "c43c042e2d954adf"
      ],
      [
        "7f2e2db52d663409",
        "e60278aac95a4d17"
      ],
      [
        "c07c1e3b276f45d1"
      ],
      [
        "b36fd1a4d2bfe88e"
      ]
    ],
    "info": "Функция: Разделить и Округлить.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "66d5570984701c67",
    "type": "inject",
    "z": "e8bc55b391f479e3",
    "name": "Главный таймер (200мс)",
    "props": [
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": ".2",
    "crontab": "",
    "once": true,
    "onceDelay": "1",
    "topic": "tick",
    "x": 160,
    "y": 100,
    "wires": [
      [
        "417ede3e7d2f0c6c"
      ]
    ],
    "info": "Триггер (Inject): Главный таймер (200мс).\nНазначение: периодическая или одноразовая генерация сообщений."
  },
  {
    "id": "417ede3e7d2f0c6c",
    "type": "switch",
    "z": "e8bc55b391f479e3",
    "name": "Проверка режима симуляции",
    "property": "simulation_mode",
    "propertyType": "global",
    "rules": [
      {
        "t": "true"
      },
      {
        "t": "false"
      }
    ],
    "checkall": "false",
    "repair": false,
    "outputs": 2,
    "x": 190,
    "y": 140,
    "wires": [
      [
        "b9ed9c5a04854dfa"
      ],
      [
        "d04e6759b8ddad37"
      ]
    ],
    "info": "Узел типа switch."
  },
  {
    "id": "2c6464b3953560b2",
    "type": "link in",
    "z": "e8bc55b391f479e3",
    "name": "simulated_temp_input",
    "links": [
      "2672a354f0030475"
    ],
    "x": 665,
    "y": 80,
    "wires": [
      [
        "6d4eefc4620f700a"
      ]
    ],
    "info": "Входная связь между потоками Node-RED."
  },
  {
    "id": "30b23a31e46130ae",
    "type": "ui_chart",
    "z": "e8bc55b391f479e3",
    "group": "80f44018e0a7f361",
    "order": 1,
    "width": "24",
    "height": 8,
    "label": "Процесс Кристаллизации",
    "chartType": "line",
    "legend": "true",
    "xformat": "HH:mm:ss",
    "interpolate": "linear",
    "nodata": "",
    "dot": false,
    "ymin": "0",
    "ymax": "200",
    "removeOlder": "10",
    "removeOlderPoints": "800",
    "removeOlderUnit": "60",
    "cutout": "",
    "useOneColor": false,
    "useUTC": false,
    "colors": [
      "#1f77b4",
      "#2ca02c",
      "#ff7f0e",
      "#000000",
      "#000000",
      "#000000",
      "#000000",
      "#000000",
      "#000000"
    ],
    "outputs": 1,
    "useDifferentColor": false,
    "className": "",
    "x": 1880,
    "y": 80,
    "wires": [
      []
    ],
    "info": "График UI: Процесс Кристаллизации."
  },
  {
    "id": "c5e8544d4af8e0ab",
    "type": "ui_template",
    "z": "db277a3598de4f9a",
    "group": "3d5a5f3a0a3cf4f0",
    "name": "Журнал изменений",
    "order": 1,
    "width": "12",
    "height": 6,
    "format": "<div class=\"agent-changelog\">\n  <h3>Версия: v2025.10.14-2</h3>\n  <p><strong>Дата изменений:</strong> 2025-10-14</p>\n  <p><strong>Описание обновлений:</strong></p>\n  <ul>\n    <li>Добавлено автоматическое чтение архива тренда при старте и обновление данных каждый час без участия оператора.</li>\n    <li>Отображение текущей температуры переведено в линейный режим без точек, чтобы тренд был лучше заметен.</li>\n    <li>Добавлен отдельный дашборд \"Журнал изменений\" с версией, датой и списком выполненных обновлений.</li>\n  </ul>\n</div>",
    "storeOutMessages": false,
    "fwdInMessages": false,
    "resendOnRefresh": true,
    "templateScope": "local",
    "className": "agent-changelog",
    "x": 420,
    "y": 120,
    "wires": [
      []
    ],
    "info": "UI шаблон: выводит версию, дату и описание последних изменений агента."
  },
  {
    "id": "af4c5aa37d881df2",
    "type": "ui_chart",
    "z": "e8bc55b391f479e3",
    "group": "80f44018e0a7f361",
    "order": 3,
    "width": "24",
    "height": 8,
    "label": "Содержание воды, %",
    "chartType": "line",
    "legend": "true",
    "xformat": "HH:mm:ss",
    "interpolate": "linear",
    "nodata": "",
    "dot": false,
    "ymin": "0",
    "ymax": "30",
    "removeOlder": "10",
    "removeOlderPoints": "800",
    "removeOlderUnit": "60",
    "cutout": 0,
    "useOneColor": false,
    "useUTC": false,
    "colors": [
      "#0055a4",
      "#ffae19",
      "#a60000",
      "#00ff00",
      "#ff00ff",
      "#00ffff",
      "#ffff00",
      "#000000",
      "#000000"
    ],
    "outputs": 1,
    "useDifferentColor": false,
    "className": "",
    "x": 1880,
    "y": 120,
    "wires": [
      []
    ],
    "info": "График UI: Содержание воды, %."
  },
  {
    "id": "a7f8634ea8a6f5c5",
    "type": "ui_text",
    "z": "e8bc55b391f479e3",
    "group": "5452d1cd18bb3597",
    "order": 1,
    "width": 6,
    "height": 1,
    "name": "",
    "label": "Состояние:",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "x": 1870,
    "y": 160,
    "wires": [],
    "info": "Текстовое поле UI: Состояние:."
  },
  {
    "id": "9d7c36a1fc54861d",
    "type": "ui_text",
    "z": "e8bc55b391f479e3",
    "group": "5452d1cd18bb3597",
    "order": 2,
    "width": 6,
    "height": 1,
    "name": "",
    "label": "T текущая (Tn), °C:",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "x": 1410,
    "y": 340,
    "wires": [],
    "info": "Текстовое поле UI: T текущая (Tn), °C:."
  },
  {
    "id": "3d3c492b466937f9",
    "type": "ui_text",
    "z": "e8bc55b391f479e3",
    "group": "9264ac7c83332c5b",
    "order": 5,
    "width": "5",
    "height": 1,
    "name": "",
    "label": "Текущий тангенс (tgn):",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "x": 1670,
    "y": 400,
    "wires": [],
    "info": "Текстовое поле UI: Текущий тангенс (tgn):."
  },
  {
    "id": "f4ba99feee20bcdf",
    "type": "ui_text",
    "z": "e8bc55b391f479e3",
    "group": "9264ac7c83332c5b",
    "order": 1,
    "width": "5",
    "height": 1,
    "name": "",
    "label": "Макс. тангенс (Tgnn):",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "x": 1720,
    "y": 480,
    "wires": [],
    "info": "Текстовое поле UI: Макс. тангенс (Tgnn):."
  },
  {
    "id": "725fb6094093f26c",
    "type": "ui_text",
    "z": "e8bc55b391f479e3",
    "group": "9264ac7c83332c5b",
    "order": 4,
    "width": "5",
    "height": 1,
    "name": "",
    "label": "Начальный тангенс (tgnn):",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "style": false,
    "font": "",
    "fontSize": "",
    "color": "#000000",
    "x": 1760,
    "y": 520,
    "wires": [],
    "info": "Текстовое поле UI: Начальный тангенс (tgnn):."
  },
  {
    "id": "b00c17818dd7c8d8",
    "type": "ui_text",
    "z": "e8bc55b391f479e3",
    "group": "9264ac7c83332c5b",
    "order": 3,
    "width": "5",
    "height": 1,
    "name": "",
    "label": "T при нач. тангенсе (Ttgnn), °C:",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "style": false,
    "font": "",
    "fontSize": "",
    "color": "#000000",
    "x": 1790,
    "y": 560,
    "wires": [],
    "info": "Текстовое поле UI: T при нач. тангенсе (Ttgnn), °C:."
  },
  {
    "id": "0c39727fb45bd2cf",
    "type": "ui_text",
    "z": "e8bc55b391f479e3",
    "group": "9264ac7c83332c5b",
    "order": 6,
    "width": "5",
    "height": 1,
    "name": "",
    "label": "Конечный тангенс (tgnk):",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "x": 1810,
    "y": 600,
    "wires": [],
    "info": "Текстовое поле UI: Конечный тангенс (tgnk):."
  },
  {
    "id": "08c6ba6473e9b2d0",
    "type": "ui_text",
    "z": "e8bc55b391f479e3",
    "group": "9264ac7c83332c5b",
    "order": 7,
    "width": "5",
    "height": 1,
    "name": "",
    "label": "T при кон. тангенсе (Ttgnk), °C:",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "x": 1890,
    "y": 640,
    "wires": [],
    "info": "Текстовое поле UI: T при кон. тангенсе (Ttgnk), °C:."
  },
  {
    "id": "d1877d9164f11fa3",
    "type": "ui_text",
    "z": "e8bc55b391f479e3",
    "group": "9264ac7c83332c5b",
    "order": 8,
    "width": "5",
    "height": 1,
    "name": "",
    "label": "Время цикла (tau_z), с:",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "x": 1910,
    "y": 680,
    "wires": [],
    "info": "Текстовое поле UI: Время цикла (tau_z), с:."
  },
  {
    "id": "aa2b951f0606d599",
    "type": "ui_text",
    "z": "e8bc55b391f479e3",
    "group": "5452d1cd18bb3597",
    "order": 5,
    "width": 6,
    "height": 1,
    "name": "",
    "label": "Этап цикла (kod):",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": "",
    "color": "#000000",
    "x": 1850,
    "y": 720,
    "wires": [],
    "info": "Текстовое поле UI: Этап цикла (kod):."
  },
  {
    "id": "5b322bf85f002b89",
    "type": "ui_text",
    "z": "e8bc55b391f479e3",
    "group": "5452d1cd18bb3597",
    "order": 3,
    "width": 6,
    "height": 1,
    "name": "",
    "label": "T кристаллизации (Tkr), °C:",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "x": 1820,
    "y": 760,
    "wires": [],
    "info": "Текстовое поле UI: T кристаллизации (Tkr), °C:."
  },
  {
    "id": "7f2e2db52d663409",
    "type": "ui_text",
    "z": "e8bc55b391f479e3",
    "group": "5452d1cd18bb3597",
    "order": 4,
    "width": 6,
    "height": 1,
    "name": "",
    "label": "Концентрация воды (Cmasv), %:",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "x": 1860,
    "y": 800,
    "wires": [],
    "info": "Текстовое поле UI: Концентрация воды (Cmasv), %:."
  },
  {
    "id": "8c2be84625094a5b",
    "type": "set-do-value",
    "z": "e8bc55b391f479e3",
    "name": "DO 0: Клапан",
    "write_ch": 0,
    "write_ch_type": "write_do_1",
    "x": 1960,
    "y": 240,
    "wires": [
      []
    ],
    "info": "Узел типа set-do-value."
  },
  {
    "id": "7827fe2d9d55b007",
    "type": "link in",
    "z": "e8bc55b391f479e3",
    "name": "link in: manual_valve_control",
    "links": [
      "0df17ceb51ac4a32",
      "0b3c007f8b43d830"
    ],
    "x": 2105,
    "y": 280,
    "wires": [
      [
        "a65f18d5c4155653"
      ]
    ],
    "info": "Входная связь между потоками Node-RED."
  },
  {
    "id": "a9352447fd3d6ee8",
    "type": "file",
    "z": "e8bc55b391f479e3",
    "name": "Архив (дописать)",
    "filename": "filename",
    "filenameType": "msg",
    "appendNewline": false,
    "createDir": true,
    "overwriteFile": "false",
    "encoding": "utf8",
    "x": 2320,
    "y": 240,
    "wires": [
      []
    ],
    "info": "Режим дозаписи: данные добавляются в конец существующего файла."
  },
  {
    "id": "ad77e4786f1f4999",
    "type": "file",
    "z": "e8bc55b391f479e3",
    "name": "Архив (перезаписать)",
    "filename": "filename",
    "filenameType": "msg",
    "appendNewline": false,
    "createDir": true,
    "overwriteFile": "true",
    "encoding": "utf8",
    "x": 2320,
    "y": 160,
    "wires": [
      []
    ],
    "info": "Режим перезаписи: содержимое файла полностью заменяется."
  },
  {
    "id": "60fc6fbe287544bc",
    "type": "switch",
    "z": "e8bc55b391f479e3",
    "name": "Проверка overwrite",
    "property": "overwrite",
    "propertyType": "msg",
    "rules": [
      {
        "t": "true"
      },
      {
        "t": "false"
      }
    ],
    "checkall": "false",
    "repair": false,
    "outputs": 2,
    "x": 2170,
    "y": 200,
    "wires": [
      [
        "ad77e4786f1f4999"
      ],
      [
        "a9352447fd3d6ee8"
      ]
    ],
    "info": "Перенаправляет сообщение в нужный режим записи архива: при msg.overwrite=true\nсрабатывает перезапись файла, иначе — дозапись."
  },
  {
    "id": "482f6812d79ec6b9",
    "type": "function",
    "z": "e8bc55b391f479e3",
    "name": "Формирование имени и строки для архива",
    "func": "// Формирование имени и строки для архива (устойчиво к рестартам)\nconst fs = global.get('fs');\nif (!fs || !fs.existsSync || !fs.statSync) {\n  node.error(\"Модуль 'fs' не доступен (settings.js → functionGlobalContext).\");\n  return null;\n}\nconst archiveDir = (global.get('ARCHIVE_DIR') || '/home/root/.node-red/archives/');\ntry { fs.mkdirSync(archiveDir, { recursive: true }); } catch (e) {}\n\nconst r = msg.payload || {};\nconst tkr = Number(r.Tkp);       // оставляем поле Tkp как в текущей схеме\nconst cmasv = Number(r.Cmasv);\n\nconst now = new Date();\nconst day = now.getDate();\nconst pad2 = n => String(n).padStart(2,'0');\nconst filePath = `${archiveDir}archive_${day}.csv`;\nconst header = \"Timestamp;Tkr_C;Cwater_percent\\n\";\nconst line =\n  `${now.getFullYear()}-${pad2(now.getMonth()+1)}-${pad2(day)} ` +\n  `${pad2(now.getHours())}:${pad2(now.getMinutes())}:${pad2(now.getSeconds())};` +\n  `${tkr.toFixed(2)};${cmasv.toFixed(3)}\\n`;\n\n// Если файла нет, создаём его с заголовком и, при наличии валидных данных, первой строкой\nif (!fs.existsSync(filePath)) {\n  msg.filename = filePath;\n  if (Number.isFinite(tkr) && Number.isFinite(cmasv)) {\n    msg.payload = header + line;\n  } else {\n    msg.payload = header;\n  }\n  msg.overwrite = true;\n  return msg;\n}\n\n// Если данные невалидные – ничего не записываем\nif (!Number.isFinite(tkr) || !Number.isFinite(cmasv)) {\n  return null;\n}\n\n// определяем \"новый день\" по mtime файла\nlet needOverwrite = true;\ntry {\n  const st = fs.statSync(filePath);\n  const mt = new Date(st.mtime);\n  needOverwrite = !(mt.getDate()===day && mt.getMonth()===now.getMonth() && mt.getFullYear()===now.getFullYear());\n} catch { needOverwrite = true; } // файла нет\n\nmsg.filename  = filePath;\nmsg.payload   = needOverwrite ? (header + line) : line;\nmsg.overwrite = needOverwrite;   // true → стираем старое\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 2030,
    "y": 200,
    "wires": [
      [
        "60fc6fbe287544bc"
      ]
    ],
    "info": "Функция: Формирование имени и строки для архива.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "c5fcc94ebfb31bec",
    "type": "function",
    "z": "e8bc55b391f479e3",
    "name": "Обработка IDLE",
    "func": "const __t_prof = Date.now();\n// --- Логика для состояния IDLE ---\n\n// Устанавливаем текстовый статус для UI\nconst statusText = \"<span style='color:#607d8b'>Ожидание</span>\";\nnode.send({ topic: \"status\", payload: statusText });\n\n// В автоматическом режиме отправляем команду на закрытие клапана\nif (!global.get('HMI_ManualMode')) {\n    node.send({ topic: \"valve_command\", payload: 0 });\n}\n\nreturn null;",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1310,
    "y": 100,
    "wires": [
      [
        "9afb61a244864547"
      ],
      [
        "1edcb3f4082e4162"
      ]
    ],
    "info": "Функция: Обработка IDLE.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "23a6e32e4b540567",
    "type": "function",
    "z": "e8bc55b391f479e3",
    "name": "Обработка HEATING",
    "func": "const __t_prof = Date.now();\n// --- Логика для состояния HEATING ---\n\nconst currentTemp = msg.payload;\nconst Tmax = global.get('Tmax') || 170;\n\nconst formattedTemp = (typeof currentTemp === \"number\" ? currentTemp.toFixed(1) : \"н/д\");\nconst statusText = `<span style='color:#ff9800'>Нагрев... (T: ${formattedTemp}°C)</span>`;\nconst outputs = [\n    { topic: \"status\", payload: statusText },\n    { setGlobal: { global_cycle_stage_text: statusText, kod: 1 } }\n];\n\n// Проверяем условие перехода в следующее состояние\nif (typeof currentTemp === \"number\" && currentTemp >= (Tmax + 2)) {\n    node.warn(\"Температура нагрева достигнута. Переход в состояние PAUSE.\");\n    flow.set('crystallizationState', 'PAUSE');\n    flow.set('pauseStartTime', Date.now());\n}\n\nnode.status({fill:'blue',shape:'ring',text:(Date.now()-__t_prof)+' ms'});\nreturn outputs;",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1320,
    "y": 140,
    "wires": [
      [
        "9afb61a244864547"
      ],
      [
        "1edcb3f4082e4162"
      ]
    ],
    "info": "Функция: Обработка HEATING.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "59ca8ae9acda45bb",
    "type": "function",
    "z": "e8bc55b391f479e3",
    "name": "Обработка PAUSE",
    "func": "const __t_prof = Date.now();\n// --- Логика для состояния PAUSE ---\n\nconst pauseStartTime = flow.get('pauseStartTime') || 0;\nconst tau_p_sec = global.get('tau_p') || 2;\nconst tau_p_ms = tau_p_sec * 1000;\n\nconst elapsedTime = Date.now() - pauseStartTime;\nconst remainingTime = Math.max(0, tau_p_ms - elapsedTime);\nconst countdown_sec = Math.round(remainingTime / 1000);\n\nglobal.set('pause_countdown', countdown_sec);\n\nconst statusText = `<span style='color:#9c27b0'>Пауза (${countdown_sec} сек)</span>`;\nconst firstOutput = [{ topic: \"status\", payload: statusText }];\nconst globalUpdate = { setGlobal: { global_cycle_stage_text: statusText, kod: 2 } };\n\nif (remainingTime <= 0) {\n    node.warn(\"Пауза окончена. Переход в состояние COOLING.\");\n    flow.set('crystallizationState', 'COOLING');\n    flow.set('coolingStartTime', Date.now());\n    global.set('pause_countdown', 0);\n\n    if (!global.get('HMI_ManualMode')) {\n        firstOutput.push({ topic: \"valve_command\", payload: 1 });\n    }\n}\n\nconst primary = firstOutput.length === 1 ? firstOutput[0] : firstOutput;\nnode.status({fill:'blue',shape:'ring',text:(Date.now()-__t_prof)+' ms'});\nreturn [primary, globalUpdate];",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1330,
    "y": 180,
    "wires": [
      [
        "9afb61a244864547"
      ],
      [
        "1edcb3f4082e4162"
      ]
    ],
    "info": "Функция: Обработка PAUSE.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "a212b3691e49fe24",
    "type": "function",
    "z": "e8bc55b391f479e3",
    "name": "Обработка COOLING",
    "func": "const __t_prof = Date.now();\n// --- Логика для состояния COOLING (обновленная версия) ---\n\nconst toFiniteNumber = (value, fallback) => {\n    const num = Number(value);\n    return Number.isFinite(num) ? num : fallback;\n};\n\nconst toPositiveInt = (value, fallback) => {\n    const num = Math.floor(Number(value));\n    return Number.isFinite(num) && num > 0 ? num : fallback;\n};\n\nconst rawTemp = Number(msg.payload);\nif (!Number.isFinite(rawTemp)) {\n    node.warn(`[COOLING] Некорректное значение температуры: ${msg.payload}`);\n    return null;\n}\nconst currentTemp = rawTemp;\n\nconst Tmax = toFiniteNumber(global.get('Tmax'), 170);\nconst Tmin = toFiniteNumber(global.get('Tmin'), 50);\nconst w = toPositiveInt(global.get('w'), 8);\nconst tPoints = toPositiveInt(global.get('t'), 5);\nconst TwdtMin = Math.max(0, toFiniteNumber(global.get('Twdt'), 60));\n\nconst statusText = `<span style='color:#2196f3'>Охлаждение / Поиск Tкр... (T: ${currentTemp.toFixed(1)}°C)</span>`;\nconst firstOutput = [{ topic: \"status\", payload: statusText }];\nconst globalUpdate = { setGlobal: { global_cycle_stage_text: statusText, kod: 4 } };\n\nconst finish = () => {\n    node.status({fill:'blue',shape:'ring',text:(Date.now()-__t_prof)+' ms'});\n    const primary = firstOutput.length === 1 ? firstOutput[0] : firstOutput;\n    return [primary, globalUpdate];\n};\n\nif (currentTemp > Tmax) {\n    return finish();\n}\n\nlet buffer = flow.get('tempBuffer');\nif (!Array.isArray(buffer)) {\n    buffer = [];\n}\n\nconst now = Date.now();\nconst windowLength = (2 * w) + 1;\nconst centerIndex = Math.min(w, windowLength - 1);\n\nbuffer.push({ temp: currentTemp, time: now });\nwhile (buffer.length > windowLength) {\n    buffer.shift();\n}\nflow.set('tempBuffer', buffer);\n\nif (buffer.length < windowLength) {\n    return finish();\n}\n\nlet tgMax = flow.get('tgMax');\nif (typeof tgMax !== 'number' || Number.isNaN(tgMax)) {\n    tgMax = Number.NEGATIVE_INFINITY;\n}\n\nlet tAtTgMax = flow.get('t_tgMax');\nif (typeof tAtTgMax !== 'number' || Number.isNaN(tAtTgMax)) {\n    tAtTgMax = null;\n}\n\nlet cnt = flow.get('cnt');\nif (!Number.isInteger(cnt) || cnt < 0) {\n    cnt = tPoints;\n}\n\nconst deltaT = buffer[windowLength - 1].temp - buffer[0].temp;\nconst deltaTimeSec = (buffer[windowLength - 1].time - buffer[0].time) / 1000;\nconst tgTn = (deltaTimeSec > 0.01) ? deltaT / deltaTimeSec : 0;\n\nfirstOutput.push({ topic: \"tangent\", payload: tgTn });\nglobal.set('tgn', tgTn);\n\nif (flow.get('isFirstTangent') !== false) {\n    global.set('Tgnn', null);\n    global.set('tgnn', null);\n    global.set('Ttgnn', null);\n    global.set('tgnk', null);\n    global.set('Ttgnk', null);\n\n    global.set('tgnn', tgTn);\n    global.set('Ttgnn', buffer[centerIndex].temp);\n    flow.set('isFirstTangent', false);\n}\n\nglobal.set('tgnk', tgTn);\nglobal.set('Ttgnk', buffer[centerIndex].temp);\n\nconst coolingStartTime = flow.get('coolingStartTime');\nconst elapsedCoolingSec = coolingStartTime ? (now - coolingStartTime) / 1000 : 0;\nconst countdownEnabled = elapsedCoolingSec >= TwdtMin;\nconst hasFiniteMax = Number.isFinite(tgMax) && tgMax !== Number.NEGATIVE_INFINITY;\n\nif (Number.isFinite(tgTn) && (tgTn >= tgMax || !hasFiniteMax)) {\n    tgMax = tgTn;\n    tAtTgMax = buffer[centerIndex].temp;\n    cnt = tPoints;\n    global.set('Tgnn', tgMax);\n    global.set('Ttgnn', tAtTgMax);\n} else if (countdownEnabled && hasFiniteMax && cnt > 0) {\n    cnt -= 1;\n}\n\nif (cnt < 0) {\n    cnt = 0;\n}\n\nflow.set('tgMax', tgMax);\nflow.set('t_tgMax', tAtTgMax);\nflow.set('cnt', cnt);\n\nif (countdownEnabled && hasFiniteMax && cnt === 0 && tAtTgMax !== null) {\n    flow.set('crystallizationState', 'CALCULATING');\n}\n\nif (currentTemp <= Tmin) {\n    flow.set('crystallizationState', 'CALCULATING');\n}\n\nreturn finish();",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1320,
    "y": 220,
    "wires": [
      [
        "9afb61a244864547"
      ],
      [
        "1edcb3f4082e4162"
      ]
    ],
    "info": "Функция: Обработка COOLING.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "f6907976026813f4",
    "type": "function",
    "z": "e8bc55b391f479e3",
    "name": "Обработка CALCULATING",
    "func": "const __t_prof = Date.now();\n// --- Логика для состояния CALCULATING (с отказоустойчивостью) ---\n\nlet Tkr_calc = flow.get('t_tgMax');\nlet statusText = \"\";\nconst firstOutput = [];\n\nconst finish = (overrideStatus) => {\n    const finalStatus = overrideStatus || statusText;\n    const primary = firstOutput.length === 1 ? firstOutput[0] : firstOutput;\n    node.status({fill:'blue',shape:'ring',text:(Date.now()-__t_prof)+' ms'});\n    return [primary, { setGlobal: { global_cycle_stage_text: finalStatus, kod: 5 } }];\n};\n\nif (typeof Tkr_calc !== 'number' || Tkr_calc === 0) {\n    node.warn(\"Tкр в текущем цикле не найдена. Пытаемся использовать предыдущее значение.\");\n    const last_Tkr = global.get('last_Tkr');\n\n    if (typeof last_Tkr === 'number' && last_Tkr > 0) {\n        Tkr_calc = last_Tkr;\n        statusText = `<font color='orange'>Внимание: Tкр не найдена, используется пред. значение!</font>`;\n        firstOutput.push({ topic: \"status\", payload: statusText });\n    } else {\n        const errorText = \"<font color='red'>Крит. ошибка: Tкр не найдена!</font>\";\n        node.error(\"Критическая ошибка: Tкр не найдена, и нет предыдущего значения. Сброс в IDLE.\");\n        flow.set('crystallizationState', 'IDLE');\n        firstOutput.push({ topic: \"status\", payload: errorText });\n        return finish(errorText);\n    }\n} else {\n    statusText = `<span style='color:#4caf50'>Расчёт... (Tкр = ${Tkr_calc.toFixed(2)}°C)</span>`;\n    firstOutput.push({ topic: \"status\", payload: statusText });\n}\n\nconst Const = global.get('Const') || 0;\nconst K1 = global.get('K1') || 1;\nconst const1 = global.get('const1') || 0;\nconst K_coeffs = {};\nfor (let i = 0; i <= 10; i++) { K_coeffs['k' + i] = global.get('k' + i) || 0; }\n\nlet meltConcentration = 0;\nfor (let i = 0; i <= 10; i++) {\n    meltConcentration += (K_coeffs['k' + i] || 0) * Math.pow(Tkr_calc, i);\n}\nmeltConcentration += Const;\nconst Cmasp = 100 - meltConcentration;\nconst Cmasv = Cmasp * K1 + const1;\n\nglobal.set('last_Tkr', Tkr_calc);\nglobal.set('last_Cmasv', Cmasv);\n\nfirstOutput.push({\n    topic: \"archive_data\",\n    payload: { Tkp: Tkr_calc, Cmasv: Cmasv }\n});\n\nnode.log(\"Цикл завершен. Сброс переменных для нового нагрева.\");\nflow.set('tgMax', -Infinity);\nflow.set('t_tgMax', 0);\nflow.set('cnt', global.get('t') || 5);\nflow.set('tempBuffer', []);\nflow.set('isFirstTangent', true);\n\nconst cycleStartTime = flow.get('coolingStartTime') || flow.get('pauseStartTime') || Date.now();\nglobal.set('last_tau_z', (Date.now() - cycleStartTime) / 1000);\n\nflow.set('crystallizationState', 'HEATING');\nnode.warn(\"Переход на новый цикл. Состояние: HEATING.\");\nif (!global.get('HMI_ManualMode')) {\n    firstOutput.push({ topic: \"valve_command\", payload: 0 });\n}\n\nreturn finish();",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1320,
    "y": 260,
    "wires": [
      [
        "9afb61a244864547"
      ],
      [
        "1edcb3f4082e4162"
      ]
    ],
    "info": "Функция: Обработка CALCULATING.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "9afb61a244864547",
    "type": "function",
    "z": "e8bc55b391f479e3",
    "name": "Распределитель выходов",
    "func": "// --- Финальная логика распределителя (refactored) ---\n\nconst topic = msg.topic;\nconst payload = msg.payload;\n\n// 1. Обрабатываем специфические сообщения\nif (topic === 'status') {\n    node.send([null, null, { payload: payload }, null, null, null]);\n}\nelse if (topic === 'valve_command') {\n    // Пришла команда на управление клапаном (0/1). Приводим к числу.\n    const v = Number(payload) ? 1 : 0;\n    // В режиме ручного управления игнорируем автоматические команды.\n    if (!global.get('HMI_ManualMode')) {\n        // Отправляем в Valve IO subflow через 5-й выход.\n        // Передаём payload и source на верхнем уровне для корректного маппинга.\n        node.send([null, null, null, null, { payload: v, source: 'auto' }, null]);\n    }\n}\nelse if (topic === 'archive_data') {\n    node.send([null, null, null, { payload: payload }, null, null]);\n}\nelse if (topic === 'tangent') {\n    const chart_msg = { payload: payload, topic: 'Тангенс' };\n    // node.send([chart_msg, null, null, null, null, null]);\n}\n// 2. БЕЗУСЛОВНО отправляем данные, которые нужны на каждом такте\n// --- Отправка данных на основной график (Выход 1) ---\nconst currentTemp = global.get('Tn');\nif (typeof currentTemp === 'number') {\n    const mainChartMsg = { payload: currentTemp, topic: 'Температура' };\n    node.send([mainChartMsg, null, null, null, null, null]);\n}\n// Проверяем, была ли уже рассчитана Tкр, и отправляем ее на график\nconst lastTkr = global.get('last_Tkr');\nif (typeof lastTkr === 'number' && lastTkr > 0) {\n    const tkrChartMsg = { payload: lastTkr, topic: 'Tкр' };\n    node.send([tkrChartMsg, null, null, null, null, null]);\nconst lastCmasv = global.get('last_Cmasv');\nif (typeof lastCmasv === 'number') {\n    const cmasvChartMsg = { payload: lastCmasv, topic: 'Содержание воды, %' };\n    node.send([null, cmasvChartMsg, null, null, null, null]);\n}\n}\n// --- Отправка данных для панели ключевых показателей (Выход 6) ---\nconst monitoringValues = {\n    Tn: currentTemp,\n    Tkr: global.get('last_Tkr'),\n    Cmasv: global.get('last_Cmasv'),\n    tgn: global.get('tgn'),\n    Tgnn: global.get('Tgnn'),\n    tgnn: global.get('tgnn'),\n    Ttgnn: global.get('Ttgnn'),\n    tgnk: global.get('tgnk'),\n    Ttgnk: global.get('Ttgnk'),\n    tau_z: global.get('last_tau_z'),\n    kod: global.get('kod'),\n    kod_text: global.get('global_cycle_stage_text'),\n    kl: global.get('kl') || 0,\n    Cwater_at_Tmax: global.get('Cwater_at_Tmax'),\n    Cwater_at_Tmin: global.get('Cwater_at_Tmin'),\n};\nconst monitoringMsg = { payload: monitoringValues };\nnode.send([null, null, null, null, null, monitoringMsg]);\nreturn null;\n",
    "outputs": 6,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1620,
    "y": 160,
    "wires": [
      [
        "c9c78eebf53ed8aa"
      ],
      [
        "f89d9b4d293f3b04"
      ],
      [
        "a7f8634ea8a6f5c5"
      ],
      [
        "482f6812d79ec6b9"
      ],
      [
        "a65f18d5c4155653"
      ],
      [
        "cd317c35ca04fd8c"
      ]
    ],
    "info": "Функция: Распределитель выходов.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "43fae219d85e6bbb",
    "type": "range",
    "z": "e8bc55b391f479e3",
    "minin": "4",
    "maxin": "20",
    "minout": "0",
    "maxout": "200",
    "action": "scale",
    "round": false,
    "property": "payload",
    "name": "2. Масштабирование",
    "x": 640,
    "y": 40,
    "wires": [
      [
        "6d4eefc4620f700a"
      ]
    ],
    "info": "Узел типа range."
  },
  {
    "id": "6d4eefc4620f700a",
    "type": "function",
    "z": "e8bc55b391f479e3",
    "name": "Сохранить Tn (global) и инициализация",
    "func": "const __t_prof = Date.now();\nif (typeof msg.payload === 'number') {\n    global.set('Tn', Number(msg.payload));\n}\nif (!flow.get('crystallizationState')) {\n    flow.set('crystallizationState', 'HEATING');\n    flow.set('isFirstTangent', true);\n    flow.set('tempBuffer', []);\n    flow.set('tgMax', -Infinity);\n    flow.set('t_tgMax', 0);\n    flow.set('cnt', global.get('t') || 5);\n    flow.set('valveState', 0);\n}\n\nnode.status({fill:'blue',shape:'ring',text:(Date.now()-__t_prof)+' ms'});\nreturn [msg, { setGlobal: { global_cycle_stage_text: 'Ожидание', kod: 0 } }];",
    "outputs": 2,
    "noerr": 0,
    "x": 880,
    "y": 80,
    "wires": [
      [
        "1c706e08087ae825"
      ],
      [
        "1edcb3f4082e4162"
      ]
    ],
    "info": "Функция: Сохранить Tn (global) и инициализация.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "1c706e08087ae825",
    "type": "change",
    "z": "e8bc55b391f479e3",
    "name": "Подготовка: получить состояние",
    "rules": [
      {
        "t": "set",
        "p": "state",
        "pt": "msg",
        "to": "crystallizationState",
        "tot": "flow"
      }
    ],
    "x": 720,
    "y": 140,
    "wires": [
      [
        "84c6f3409ee08d14"
      ]
    ],
    "info": "Узел типа change."
  },
  {
    "id": "84c6f3409ee08d14",
    "type": "switch",
    "z": "e8bc55b391f479e3",
    "name": "Маршрутизатор состояний",
    "property": "state",
    "rules": [
      {
        "t": "eq",
        "v": "IDLE",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "HEATING",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "PAUSE",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "COOLING",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "CALCULATING",
        "vt": "str"
      }
    ],
    "outputs": 5,
    "x": 1020,
    "y": 200,
    "wires": [
      [
        "c5fcc94ebfb31bec"
      ],
      [
        "23a6e32e4b540567"
      ],
      [
        "59ca8ae9acda45bb"
      ],
      [
        "a212b3691e49fe24"
      ],
      [
        "f6907976026813f4"
      ]
    ],
    "info": "Узел типа switch."
  },
  {
    "id": "0854737dfb856751",
    "type": "ui_chart",
    "z": "e8bc55b391f479e3",
    "name": "",
    "group": "80f44018e0a7f361",
    "order": 2,
    "width": "24",
    "height": 8,
    "label": "Динамика тангенса (tgn)",
    "chartType": "line",
    "legend": "true",
    "xformat": "HH:mm:ss",
    "interpolate": "linear",
    "nodata": "Нет данных",
    "dot": false,
    "ymin": "",
    "ymax": "",
    "removeOlder": "10",
    "removeOlderPoints": "800",
    "removeOlderUnit": "60",
    "cutout": 0,
    "useOneColor": false,
    "useUTC": false,
    "colors": [
      "#ff9800"
    ],
    "outputs": 1,
    "useDifferentColor": false,
    "className": "",
    "x": 1690,
    "y": 440,
    "wires": [
      []
    ],
    "info": "График UI: Динамика тангенса (tgn)."
  },
  {
    "id": "80af09c5430ed80b",
    "type": "function",
    "z": "e8bc55b391f479e3",
    "name": "Reset Cycle",
    "func": "const __t_prof = Date.now();\nflow.set('crystallizationState','HEATING');\nflow.set('isFirstTangent',true);\nflow.set('tempBuffer',[]);\nflow.set('tgMax',-Infinity);\nflow.set('t_tgMax',0);\nflow.set('cnt', global.get('t') || 5);\n\nconst firstOutput = [];\nif (!global.get('HMI_ManualMode')) {\n    firstOutput.push({ topic: 'valve_command', payload: 0 });\n}\n\nconst primary = firstOutput.length === 1 ? firstOutput[0] : (firstOutput.length ? firstOutput : null);\nnode.status({fill:'blue',shape:'ring',text:(Date.now()-__t_prof)+' ms'});\nreturn [primary, { setGlobal: { global_cycle_stage_text: 'Нагрев...', kod: 0 } }];",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 830,
    "y": 300,
    "wires": [
      [],
      [
        "1edcb3f4082e4162"
      ]
    ],
    "info": "Функция: Reset Cycle.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "97ba379604754c85",
    "type": "comment",
    "z": "e8bc55b391f479e3",
    "name": "🔹 Распределитель выходов",
    "info": "Финальная точка обработки — отправка данных на графики, HMI, архив и исполнительные устройства",
    "x": 100,
    "y": 800,
    "wires": []
  },
  {
    "id": "a65f18d5c4155653",
    "type": "subflow:dc976ebfa2ef6949",
    "z": "e8bc55b391f479e3",
    "name": "Valve IO (priorities)",
    "env": [],
    "x": 2230,
    "y": 380,
    "wires": [
      [
        "8c2be84625094a5b"
      ],
      [
        "1bfe59bba310254e"
      ]
    ]
  },
  {
    "id": "1bfe59bba310254e",
    "type": "debug",
    "z": "e8bc55b391f479e3",
    "name": "valve status",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 2430,
    "y": 380,
    "wires": []
  },
  {
    "id": "02a367c1bfd1757c",
    "type": "inject",
    "z": "e8bc55b391f479e3",
    "name": "TEST auto OPEN",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "source",
        "v": "auto",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "payload": "1",
    "payloadType": "num",
    "x": 1980,
    "y": 380,
    "wires": [
      [
        "a65f18d5c4155653"
      ]
    ]
  },
  {
    "id": "4e26b1b515b98f0b",
    "type": "inject",
    "z": "e8bc55b391f479e3",
    "name": "TEST auto CLOSE",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "source",
        "v": "auto",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "payload": "0",
    "payloadType": "num",
    "x": 1990,
    "y": 420,
    "wires": [
      [
        "a65f18d5c4155653"
      ]
    ]
  },
  {
    "id": "4f4112eb97cacf5b",
    "type": "inject",
    "z": "64b65a1231f8c8ed",
    "name": "При старте 0.1с",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": "0.2",
    "topic": "init",
    "payload": "",
    "payloadType": "date",
    "x": 130,
    "y": 60,
    "wires": [
      [
        "5045f9107ffe9b6d"
      ]
    ],
    "info": "Триггер (Inject): При старте 0.1с.\nНазначение: периодическая или одноразовая генерация сообщений."
  },
  {
    "id": "b03bc725d31137d0",
    "type": "link in",
    "z": "64b65a1231f8c8ed",
    "name": "link in: trigger-read-cryst-vars",
    "links": [
      "839511af3fc8ca33",
      "4bfe7a9a0535c2c4",
      "599b39ebe4801517"
    ],
    "x": 195,
    "y": 120,
    "wires": [
      [
        "5045f9107ffe9b6d"
      ]
    ],
    "info": "Входная связь между потоками Node-RED."
  },
  {
    "id": "5045f9107ffe9b6d",
    "type": "file in",
    "z": "64b65a1231f8c8ed",
    "name": "Прочитать crystallization_params.json",
    "filename": "/home/root/.node-red/save/crystallization_params.json",
    "filenameType": "str",
    "format": "utf8",
    "chunk": false,
    "sendError": true,
    "allProps": false,
    "x": 530,
    "y": 60,
    "wires": [
      [
        "9dae2303a68e01d7"
      ]
    ],
    "info": "Работа с файлом: Прочитать crystallization_params.json."
  },
  {
    "id": "61edd83d198126f0",
    "type": "catch",
    "z": "64b65a1231f8c8ed",
    "name": "Ошибка чтения файла",
    "scope": [
      "5045f9107ffe9b6d"
    ],
    "uncaught": false,
    "x": 320,
    "y": 140,
    "wires": [
      [
        "dd41844198a05d56"
      ]
    ],
    "info": "Узел типа catch."
  },
  {
    "id": "9dae2303a68e01d7",
    "type": "json",
    "z": "64b65a1231f8c8ed",
    "name": "",
    "property": "payload",
    "action": "",
    "pretty": false,
    "x": 970,
    "y": 60,
    "wires": [
      [
        "dd41844198a05d56"
      ]
    ],
    "info": "Узел типа json."
  },
  {
    "id": "dd41844198a05d56",
    "type": "function",
    "z": "64b65a1231f8c8ed",
    "name": "Init/Read Crystallization Vars",
    "func": "const defaultParams = {\n    Tmax: 170, Tmin: 50, tau_p: 2, tau_i: 100, Twdt: 60, w: 8, t: 5,\n    Const: 0, K1: 1, const1: 0, K2: 1, const2: 0, K3: 1, const3: 0, K4: 1, const4: 0,\n    k0: 54.24638, k1: 0.65568, k2: -0.00538, k3: 6.48221e-5, k4: -1.29211e-6,\n    k5: 1.87582e-8, k6: -1.38281e-10, k7: 4.17272e-13, k8: 2.11796e-17,\n    k9: -1.70365e-18, k10: 0, HMI_ResetCycle: 0, HMI_StopCycle: 0, HMI_ApplyAndSave: 0,\n    HMI_ReadFromFile: 0, HMI_ManualMode: 0, HMI_ManualValveState: 0\n};\nlet loadedData = {};\nif (msg.payload && typeof msg.payload === 'object' && !msg.error) {\n    loadedData = msg.payload;\n    node.log(\"[INIT] Параметры и память HMI загружены из файла.\");\n} else {\n    loadedData = { settings: { ...defaultParams }, hmi_memory: {} };\n    node.warn(\"[INIT] Файл настроек не найден, используются значения по умолчанию.\");\n}\nconst finalSettings = loadedData.settings || { ...defaultParams };\nfor (const key in defaultParams) {\n    const value = finalSettings.hasOwnProperty(key) ? finalSettings[key] : defaultParams[key];\n    global.set(key, Number(value));\n}\nglobal.set('uiStateCrystallization', { ...finalSettings });\nglobal.set('savedStateCrystallization', { ...finalSettings });\nconst hmiMemory = loadedData.hmi_memory || {};\nflow.set('hmi_memory', hmiMemory);\nnode.log(\"[INIT] Память опроса HMI восстановлена.\");\nglobal.set('system_startup_time', Date.now());\nnode.log(\"--- СИСТЕМА УСПЕШНО ИНИЦИАЛИЗИРОВАНА ---\");\nconst linkTestDefaults = {\n    HMI_LinkTest_Command: 0,\n    HMI_LinkTest_Echo: 0,\n    HMI_LinkTest_LastPing: 0,\n    HMI_LinkTest_LastAck: 0,\n    HMI_LinkTest_StatusCode: 0,\n    HMI_LinkTest_RoundtripMs: 0\n};\nfor (const [key, value] of Object.entries(linkTestDefaults)) {\n    global.set(key, value);\n}\n\n// Инициализация автомата состояний процесса (добавлено)\nflow.set('crystallizationState', 'HEATING');\nflow.set('isFirstTangent', true);\nflow.set('tempBuffer', []);\nflow.set('tgMax', -Infinity);\nflow.set('t_tgMax', 0);\nflow.set('cnt', global.get('t') || 5);\nreturn { payload: \"refresh_after_init\" };\n",
    "outputs": 1,
    "noerr": 0,
    "x": 600,
    "y": 140,
    "wires": [
      [
        "e5f354f840e61f82",
        "7e15fa24dbb77d1d",
        "f2a46e78043cbfdd"
      ]
    ],
    "info": "Функция: Init/Read Crystallization Vars.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "7e15fa24dbb77d1d",
    "type": "function",
    "z": "64b65a1231f8c8ed",
    "name": "Очистить фильтр и загрузить архив",
    "func": "flow.set('t_start', '');\nflow.set('t_end', '');\nflow.set('ymin', '');\nflow.set('ymax', '');\nconst msg1 = { payload: '', topic: 't_start' };\nconst msg2 = { payload: '', topic: 't_end' };\nconst msg3 = { payload: 'trigger' };\nreturn [[msg1, msg2], msg3];",
    "outputs": 2,
    "noerr": 0,
    "x": 1010,
    "y": 160,
    "wires": [
      [
        "1f6618c06f8081c7"
      ],
      []
    ],
    "info": "Функция: Очистить фильтр и загрузить архив.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "1f6618c06f8081c7",
    "type": "link out",
    "z": "64b65a1231f8c8ed",
    "name": "link out: update-archive-filter-ui",
    "mode": "link",
    "links": [
      "d7cdc9c8cf99c5db"
    ],
    "x": 1215,
    "y": 120,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "e5f354f840e61f82",
    "type": "link out",
    "z": "64b65a1231f8c8ed",
    "name": "link out: refresh-cryst-ui",
    "mode": "link",
    "links": [
      "e1783aee6774f4ab",
      "65c637403045e1a9"
    ],
    "x": 805,
    "y": 120,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "f2a46e78043cbfdd",
    "type": "function",
    "z": "64b65a1231f8c8ed",
    "name": "Принудительное обновление буфера Modbus",
    "func": "const paramsToUpdate = global.get('uiStateCrystallization') || {};\nconst setpointsToManage = [\n    { globalName: \"Tmax\", modbusAddress: 0 }, { globalName: \"Tmin\", modbusAddress: 2 },\n    { globalName: \"tau_p\", modbusAddress: 4 }, { globalName: \"tau_i\", modbusAddress: 6 },\n    { globalName: \"Twdt\", modbusAddress: 8 }, { globalName: \"w\", modbusAddress: 10 },\n    { globalName: \"t\", modbusAddress: 12 }, { globalName: \"Const\", modbusAddress: 14 },\n    { globalName: \"K1\", modbusAddress: 16 }, { globalName: \"const1\", modbusAddress: 18 },\n    { globalName: \"K2\", modbusAddress: 20 }, { globalName: \"const2\", modbusAddress: 22 },\n    { globalName: \"K3\", modbusAddress: 24 }, { globalName: \"const3\", modbusAddress: 26 },\n    { globalName: \"K4\", modbusAddress: 28 }, { globalName: \"const4\", modbusAddress: 30 },\n    { globalName: \"k0\", modbusAddress: 32 }, { globalName: \"k1\", modbusAddress: 34 },\n    { globalName: \"k2\", modbusAddress: 36 }, { globalName: \"k3\", modbusAddress: 38 },\n    { globalName: \"k4\", modbusAddress: 40 }, { globalName: \"k5\", modbusAddress: 42 },\n    { globalName: \"k6\", modbusAddress: 44 }, { globalName: \"k7\", modbusAddress: 46 },\n    { globalName: \"k8\", modbusAddress: 48 }, { globalName: \"k9\", modbusAddress: 50 },\n    { globalName: \"k10\", modbusAddress: 52 },\n    { globalName: \"HMI_ResetCycle\", modbusAddress: 54 }, { globalName: \"HMI_StopCycle\", modbusAddress: 56 },\n    { globalName: \"HMI_ApplyAndSave\", modbusAddress: 58 }, { globalName: \"HMI_ReadFromFile\", modbusAddress: 60 },\n    { globalName: \"HMI_ManualMode\", modbusAddress: 62 }, { globalName: \"HMI_ManualValveState\", modbusAddress: 64 },\n    { globalName: \"HMI_LinkTest_Command\", modbusAddress: 66 }, { globalName: \"HMI_LinkTest_Echo\", modbusAddress: 68 },\n    { globalName: \"HMI_LinkTest_LastPing\", modbusAddress: 430 }, { globalName: \"HMI_LinkTest_LastAck\", modbusAddress: 432 },\n    { globalName: \"HMI_LinkTest_StatusCode\", modbusAddress: 434 }, { globalName: \"HMI_LinkTest_RoundtripMs\", modbusAddress: 436 }\n];\nnode.log(\"Принудительное обновление буфера Modbus после старта...\");\nfor (const sp of setpointsToManage) {\n    const value = paramsToUpdate[sp.globalName];\n    if (typeof value === 'number' && !isNaN(value)) {\n        const byteBuffer = Buffer.alloc(4);\n        byteBuffer.writeFloatBE(value, 0);\n        const word_AB = byteBuffer.readUInt16BE(0);\n        const word_CD = byteBuffer.readUInt16BE(2);\n        byteBuffer.writeUInt16BE(word_CD, 0);\n        byteBuffer.writeUInt16BE(word_AB, 2);\n        node.send({\n            payload: {\n                'value': byteBuffer,\n                'register': 'holding',\n                'address': sp.modbusAddress\n            }\n        });\n    }\n}\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "x": 640,
    "y": 240,
    "wires": [
      [
        "f9d251da7b129641"
      ]
    ],
    "info": "Функция: Принудительное обновление буфера Modbus.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "f9d251da7b129641",
    "type": "link out",
    "z": "64b65a1231f8c8ed",
    "name": "заполняем сервер",
    "mode": "link",
    "links": [
      "65c637403045e1a9"
    ],
    "x": 925,
    "y": 240,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "29648253e1a49a43",
    "type": "link in",
    "z": "f4ca7c12859fb17f",
    "name": "link in: trigger-save-apply-vars",
    "links": [
      "ac7d999b5b40ee44",
      "401be6d911b0275d"
    ],
    "x": 195,
    "y": 100,
    "wires": [
      [
        "94bb895e2776dc87"
      ]
    ],
    "info": "Входная связь между потоками Node-RED."
  },
  {
    "id": "94bb895e2776dc87",
    "type": "function",
    "z": "f4ca7c12859fb17f",
    "name": "Apply & Save",
    "func": "const uiState = global.get('uiStateCrystallization') || {};\nconst validVars = ['Tmax', 'Tmin', 'tau_p', 'tau_i', 'Twdt', 'w', 't', 'Const', 'K1', 'const1', 'K2', 'const2', 'K3', 'const3', 'K4', 'const4', 'k0', 'k1', 'k2', 'k3', 'k4', 'k5', 'k6', 'k7', 'k8', 'k9', 'k10', 'HMI_ResetCycle', 'HMI_StopCycle', 'HMI_ApplyAndSave', 'HMI_ReadFromFile', 'HMI_ManualMode', 'HMI_ManualValveState'];\nfor (const key of validVars) {\n    if (uiState.hasOwnProperty(key)) {\n        global.set(key, uiState[key]);\n    }\n}\nglobal.set('savedStateCrystallization', { ...uiState });\nnode.log(\"[APPLY & SAVE] Параметры применены к глобальным переменным.\");\nconst hmiMemory = flow.get('hmi_memory') || {};\nconst dataToSave = {\n    settings: uiState,\n    hmi_memory: hmiMemory\n};\nconst filePayload = { payload: dataToSave };\nconst statusMessage = { payload: \"<font color='green'>Применено и сохранено</font>\" };\nconst refreshTrigger = { payload: \"refresh\" };\nreturn [filePayload, statusMessage, refreshTrigger];",
    "outputs": 3,
    "noerr": 0,
    "x": 350,
    "y": 100,
    "wires": [
      [
        "b9c28ad8fdbb857a"
      ],
      [
        "0b3754dc68c88245"
      ],
      [
        "2f974e4eb8acf7a0"
      ]
    ],
    "info": "Функция: Apply & Save.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "b9c28ad8fdbb857a",
    "type": "json",
    "z": "f4ca7c12859fb17f",
    "name": "",
    "property": "payload",
    "x": 570,
    "y": 60,
    "wires": [
      [
        "ab098851d2899bf1"
      ]
    ],
    "info": "Узел типа json."
  },
  {
    "id": "a8cb70942b3a1820",
    "type": "file",
    "z": "f4ca7c12859fb17f",
    "name": "Записать в crystallization_params.json",
    "filename": "/home/root/.node-red/save/crystallization_params.json",
    "overwriteFile": "true",
    "x": 1050,
    "y": 60,
    "wires": [
      []
    ],
    "info": "Работа с файлом: Записать в crystallization_params.json."
  },
  {
    "id": "0b3754dc68c88245",
    "type": "link out",
    "z": "f4ca7c12859fb17f",
    "name": "link out: update-cryst-status",
    "mode": "link",
    "links": [
      "5ddca554b43e5d93"
    ],
    "x": 595,
    "y": 120,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "2f974e4eb8acf7a0",
    "type": "link out",
    "z": "f4ca7c12859fb17f",
    "name": "link out: refresh-cryst-ui",
    "mode": "link",
    "links": [
      "e1783aee6774f4ab"
    ],
    "x": 595,
    "y": 160,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "ab098851d2899bf1",
    "type": "function",
    "z": "f4ca7c12859fb17f",
    "name": "Pretty JSON (2sp)",
    "func": "// Делает красивую JSON-строку с отступами и переводом строки в конце\n// Ожидает, что на вход пришла строка JSON или объект\nif (typeof msg.payload === 'string') {\n  try { msg.payload = JSON.parse(msg.payload); } catch(e) {}\n}\nif (typeof msg.payload !== 'object' || msg.payload === null) {\n  node.warn('payload не объект — сериализация как есть');\n}\nmsg.payload = JSON.stringify(msg.payload, null, 2) + '\\n';\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 770,
    "y": 60,
    "wires": [
      [
        "a8cb70942b3a1820"
      ]
    ]
  },
  {
    "id": "297b4de1dd3ece30",
    "type": "inject",
    "z": "8372291c47969a65",
    "name": "Проверка команд HMI (500мс)",
    "props": [],
    "repeat": "0.5",
    "crontab": "",
    "once": true,
    "onceDelay": "1",
    "topic": "",
    "x": 200,
    "y": 100,
    "wires": [
      [
        "f083efe03d2c651f"
      ]
    ],
    "info": "Триггер (Inject): Проверка команд HMI (500мс).\nНазначение: периодическая или одноразовая генерация сообщений."
  },
  {
    "id": "f083efe03d2c651f",
    "type": "function",
    "z": "8372291c47969a65",
    "name": "Обработчик команд HMI",
    "func": "// --- HMI Command Processing (refactored) ---\n// This node handles triggers and mode commands from external HMI via Modbus.\n// It emits commands on different outputs:\n// [0] UI switch status (true/false),\n// [1] Reset (\"reset\"),\n// [2] Stop (\"stop\"),\n// [3] Apply/save (\"apply\"),\n// [4] Read config (\"read\"),\n// [5] Update archive (\"update\"),\n// [6] Valve command for manual control (payload 0/1 or clear).\n\nconst msgs = [null, null, null, null, null, null, null];\n// Handle momentary triggers\nif (global.get('HMI_ResetCycle') === 1.0) {\n    msgs[1] = { payload: 'reset' };\n    global.set('HMI_ResetCycle', 0.0);\n}\nif (global.get('HMI_StopCycle') === 1.0) {\n    msgs[2] = { payload: 'stop' };\n    global.set('HMI_StopCycle', 0.0);\n}\nif (global.get('HMI_ApplyAndSave') === 1.0) {\n    msgs[3] = { payload: 'apply' };\n    global.set('HMI_ApplyAndSave', 0.0);\n}\nif (global.get('HMI_ReadFromFile') === 1.0) {\n    msgs[4] = { payload: 'read' };\n    global.set('HMI_ReadFromFile', 0.0);\n}\nif (global.get('HMI_UpdateArchive') === 1.0) {\n    msgs[5] = { payload: 'update' };\n    global.set('HMI_UpdateArchive', 0.0);\n}\n\n// Process manual mode flag\nconst manualMode = global.get('HMI_ManualMode');\nif (manualMode === 1.0) {\n    // Manual mode active: send valve state only on change\n    const valveState = global.get('HMI_ManualValveState');\n    // Accept only 0 or 1\n    if (valveState === 0.0 || valveState === 1.0) {\n        const last = context.get('lastSentValveState');\n        if (last === undefined || last !== valveState) {\n            msgs[6] = { payload: valveState, source: 'hmi' };\n            context.set('lastSentValveState', valveState);\n        }\n    }\n} else {\n    // Exiting manual mode: clear last command\n    if (context.get('lastSentValveState') !== undefined) {\n        msgs[6] = { clear: 'hmi' };\n        context.set('lastSentValveState', undefined);\n    }\n}\n// --- Handshake test between ADAM-6717 and HMI ---\nconst now = Date.now();\nlet linkTest = context.get('linkTest') || { state: 'idle', counter: 0, expected: 0, startTs: 0, lastAck: 0 };\nconst linkCmdRaw = Number(global.get('HMI_LinkTest_Command') || 0);\nconst linkCmd = Number.isFinite(linkCmdRaw) && linkCmdRaw > 0 ? 1 : 0;\nconst linkEchoRaw = Number(global.get('HMI_LinkTest_Echo'));\nconst linkEcho = Number.isFinite(linkEchoRaw) ? Math.round(linkEchoRaw) : 0;\nconst handshakeUpdates = {};\nif (linkCmd === 1 && linkTest.state !== 'running') {\n    linkTest.counter = (linkTest.counter % 32000) + 1;\n    linkTest.expected = linkTest.counter;\n    linkTest.startTs = now;\n    linkTest.state = 'running';\n    handshakeUpdates.HMI_LinkTest_LastPing = linkTest.counter;\n    handshakeUpdates.HMI_LinkTest_StatusCode = 1;\n    handshakeUpdates.HMI_LinkTest_RoundtripMs = 0;\n    handshakeUpdates.HMI_LinkTest_Command = 0;\n}\nif (linkTest.state === 'running') {\n    if (linkEcho === linkTest.expected) {\n        handshakeUpdates.HMI_LinkTest_LastAck = linkEcho;\n        handshakeUpdates.HMI_LinkTest_StatusCode = 2;\n        handshakeUpdates.HMI_LinkTest_RoundtripMs = now - linkTest.startTs;\n        linkTest.state = 'idle';\n        linkTest.lastAck = linkEcho;\n    } else if (now - linkTest.startTs > 5000) {\n        handshakeUpdates.HMI_LinkTest_LastAck = linkEcho;\n        handshakeUpdates.HMI_LinkTest_StatusCode = -1;\n        handshakeUpdates.HMI_LinkTest_RoundtripMs = now - linkTest.startTs;\n        linkTest.state = 'idle';\n    }\n}\nif (Object.keys(handshakeUpdates).length) {\n    for (const [key, value] of Object.entries(handshakeUpdates)) {\n        global.set(key, value);\n    }\n}\ncontext.set('linkTest', linkTest);\n// --- End handshake test logic ---\n\n// Send UI switch state on output 0\nmsgs[0] = { payload: (manualMode === 1.0) };\nreturn msgs;\n",
    "outputs": 7,
    "noerr": 0,
    "x": 480,
    "y": 100,
    "wires": [
      [
        "f3ca579116464c52"
      ],
      [
        "0fd6bcdfd846f848"
      ],
      [],
      [
        "4bfe7a9a0535c2c4"
      ],
      [
        "599b39ebe4801517"
      ],
      [],
      [
        "0df17ceb51ac4a32"
      ]
    ],
    "info": "Функция: Обработчик команд HMI.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "f3ca579116464c52",
    "type": "link out",
    "z": "8372291c47969a65",
    "name": "link out: hmi_manual_switch_sync",
    "mode": "link",
    "links": [
      "ce11cb4b50dfc48f"
    ],
    "x": 805,
    "y": 60,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "0fd6bcdfd846f848",
    "type": "link out",
    "z": "8372291c47969a65",
    "name": "hmi_reset_trigger",
    "mode": "link",
    "links": [
      "eae2053618e8cbaf"
    ],
    "x": 775,
    "y": 100,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "4bfe7a9a0535c2c4",
    "type": "link out",
    "z": "8372291c47969a65",
    "name": "hmi_apply_trigger",
    "mode": "link",
    "links": [
      "b03bc725d31137d0"
    ],
    "x": 775,
    "y": 180,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "599b39ebe4801517",
    "type": "link out",
    "z": "8372291c47969a65",
    "name": "hmi_read_trigger",
    "mode": "link",
    "links": [
      "b03bc725d31137d0"
    ],
    "x": 775,
    "y": 220,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "0df17ceb51ac4a32",
    "type": "link out",
    "z": "8372291c47969a65",
    "name": "hmi_manual_valve_cmd",
    "mode": "link",
    "links": [
      "7827fe2d9d55b007"
    ],
    "x": 795,
    "y": 300,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "006fe821b2a40c0b",
    "type": "modbus-server",
    "z": "c0bf68bfbce72297",
    "name": "Modbus TCP Server",
    "logEnabled": true,
    "hostname": "192.168.0.214",
    "serverPort": "502",
    "responseDelay": 100,
    "delayUnit": "ms",
    "coilsBufferSize": "2000",
    "holdingBufferSize": "2000",
    "inputBufferSize": "2000",
    "discreteBufferSize": "2000",
    "showErrors": true,
    "x": 860,
    "y": 200,
    "wires": [
      [],
      [],
      [],
      [],
      []
    ],
    "info": "Узел типа modbus-server."
  },
  {
    "id": "cb0eeaf7d4be2c82",
    "type": "inject",
    "z": "c0bf68bfbce72297",
    "name": "Обновление данных (1 сек)",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "1",
    "crontab": "",
    "once": true,
    "onceDelay": "5",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 200,
    "y": 200,
    "wires": [
      [
        "44d90dd50a3eaabd"
      ]
    ],
    "info": "Триггер (Inject): Обновление данных (1 сек).\nНазначение: периодическая или одноразовая генерация сообщений."
  },
  {
    "id": "44d90dd50a3eaabd",
    "type": "function",
    "z": "c0bf68bfbce72297",
    "name": "Обновление Global в Modbus HR",
    "func": "// Карта ВСЕХ переменных для отображения на HMI\n// Расчет концентрации воды при Tmax и Tmin\nconst TmaxVal = global.get('Tmax') || 0;\nconst TminVal = global.get('Tmin') || 0;\nconst ConstVal = global.get('Const') || 0;\nconst K1Val = global.get('K1') || 1;\nconst const1Val = global.get('const1') || 0;\nconst kCoeffs = {};\nfor (let i = 0; i <= 10; i++) { kCoeffs['k' + i] = global.get('k' + i) || 0; }\nfunction computeCwater(T) {\n    let meltConcentration = 0;\n    for (let i = 0; i <= 10; i++) {\n        meltConcentration += (kCoeffs['k' + i] || 0) * Math.pow(T, i);\n    }\n    meltConcentration += ConstVal;\n    const Cmasp = 100 - meltConcentration;\n    return Cmasp * K1Val + const1Val;\n}\nglobal.set('Cwater_at_Tmax', computeCwater(TmaxVal));\nglobal.set('Cwater_at_Tmin', computeCwater(TminVal));\n\nconst variableMap = [\n    // Уставки (адреса 0-399)\n    { globalName: \"Tmax\", modbusAddress: 0 }, { globalName: \"Tmin\", modbusAddress: 2 },\n    { globalName: \"tau_p\", modbusAddress: 4 }, { globalName: \"tau_i\", modbusAddress: 6 },\n    { globalName: \"Twdt\", modbusAddress: 8 }, { globalName: \"w\", modbusAddress: 10 },\n    { globalName: \"t\", modbusAddress: 12 },\n    { globalName: \"Const\", modbusAddress: 14 }, { globalName: \"K1\", modbusAddress: 16 },\n    { globalName: \"const1\", modbusAddress: 18 },\n    { globalName: \"K2\", modbusAddress: 20 }, { globalName: \"const2\", modbusAddress: 22 },\n    { globalName: \"K3\", modbusAddress: 24 }, { globalName: \"const3\", modbusAddress: 26 },\n    { globalName: \"K4\", modbusAddress: 28 }, { globalName: \"const4\", modbusAddress: 30 },\n    { globalName: \"k0\", modbusAddress: 32 }, { globalName: \"k1\", modbusAddress: 34 },\n    { globalName: \"k2\", modbusAddress: 36 }, { globalName: \"k3\", modbusAddress: 38 },\n    { globalName: \"k4\", modbusAddress: 40 }, { globalName: \"k5\", modbusAddress: 42 },\n    { globalName: \"k6\", modbusAddress: 44 }, { globalName: \"k7\", modbusAddress: 46 },\n    { globalName: \"k8\", modbusAddress: 48 }, { globalName: \"k9\", modbusAddress: 50 },\n    { globalName: \"k10\", modbusAddress: 52 },\n    { globalName: \"HMI_ResetCycle\", modbusAddress: 54 }, { globalName: \"HMI_StopCycle\", modbusAddress: 56 },\n    { globalName: \"HMI_ApplyAndSave\", modbusAddress: 58 }, { globalName: \"HMI_ReadFromFile\", modbusAddress: 60 },\n    { globalName: \"HMI_ManualMode\", modbusAddress: 62 }, { globalName: \"HMI_ManualValveState\", modbusAddress: 64 },\n    // Измеренные и Рассчитанные (адреса 400+)\n    { globalName: \"kod\", modbusAddress: 400 },\n    { globalName: \"pause_countdown\", modbusAddress: 402 },\n    { globalName: \"kl\", modbusAddress: 404 },\n    { globalName: \"Tn\", modbusAddress: 406 },\n    { globalName: \"last_Tkr\", modbusAddress: 408 },\n    { globalName: \"last_Cmasv\", modbusAddress: 410 },\n    { globalName: \"Cwater_at_Tmax\", modbusAddress: 412 },\n    { globalName: \"Cwater_at_Tmin\", modbusAddress: 414 },\n    { globalName: \"tgn\", modbusAddress: 416 },\n    { globalName: \"tgnn\", modbusAddress: 418 },\n    { globalName: \"Ttgnn\", modbusAddress: 420 },\n    { globalName: \"tgnk\", modbusAddress: 422 },\n    { globalName: \"Ttgnk\", modbusAddress: 424 },\n    { globalName: \"HMI_LinkTest_LastPing\", modbusAddress: 430 },\n    { globalName: \"HMI_LinkTest_LastAck\", modbusAddress: 432 },\n    { globalName: \"HMI_LinkTest_StatusCode\", modbusAddress: 434 },\n    { globalName: \"HMI_LinkTest_RoundtripMs\", modbusAddress: 436 }\n];\nlet updatesMade = 0;\nlet errorsCount = 0;\nvariableMap.forEach(item => {\n    const floatValue = global.get(item.globalName);\n    if (typeof floatValue === 'number' && !isNaN(floatValue)) {\n        const byteBuffer = Buffer.alloc(4);\n        byteBuffer.writeFloatBE(floatValue, 0);\n        const word_AB = byteBuffer.readUInt16BE(0);\n        const word_CD = byteBuffer.readUInt16BE(2);\n        byteBuffer.writeUInt16BE(word_CD, 0);\n        byteBuffer.writeUInt16BE(word_AB, 2);\n        node.send({ payload: { 'value': byteBuffer, 'register': 'holding', 'address': item.modbusAddress } });\n        updatesMade++;\n    } else {\n        errorsCount++;\n    }\n});\nif (errorsCount > 0) {\n    node.status({ fill: \"yellow\", shape: \"dot\", text: `Обновлено ${updatesMade} из ${variableMap.length}. Ошибок: ${errorsCount}` });\n} else {\n    node.status({ fill: \"green\", shape: \"dot\", text: `Обновлено ${updatesMade} переменных в Modbus` });\n}\nreturn null;",
    "outputs": 1,
    "noerr": 0,
    "x": 520,
    "y": 200,
    "wires": [
      [
        "006fe821b2a40c0b"
      ]
    ],
    "info": "Функция: Обновление Global в Modbus HR.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "96f6bf355fc641b7",
    "type": "inject",
    "z": "c0bf68bfbce72297",
    "name": "Опрос уставок HMI (1 сек)",
    "props": [],
    "repeat": "1",
    "crontab": "",
    "once": true,
    "onceDelay": "3",
    "topic": "",
    "x": 200,
    "y": 360,
    "wires": [
      [
        "818cd58044471633"
      ]
    ],
    "info": "Триггер (Inject): Опрос уставок HMI (1 сек).\nНазначение: периодическая или одноразовая генерация сообщений."
  },
  {
    "id": "62036f70ad9c6a0e",
    "type": "modbus-flex-getter",
    "z": "c0bf68bfbce72297",
    "name": "Прочитать уставки с HMI",
    "showStatusActivities": false,
    "showErrors": false,
    "showWarnings": true,
    "logIOActivities": false,
    "server": "modbus-server-config",
    "useIOFile": false,
    "ioFile": "",
    "useIOForPayload": false,
    "emptyMsgOnFail": false,
    "keepMsgProperties": false,
    "x": 1050,
    "y": 360,
    "wires": [
      [
        "011145a067c9be39"
      ],
      []
    ],
    "info": "Узел типа modbus-flex-getter."
  },
  {
    "id": "46d2537a0c338453",
    "type": "link out",
    "z": "c0bf68bfbce72297",
    "name": "Триггер UI",
    "mode": "link",
    "links": [
      "e1783aee6774f4ab"
    ],
    "x": 1365,
    "y": 260,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "401be6d911b0275d",
    "type": "link out",
    "z": "c0bf68bfbce72297",
    "name": "Триггер Сохранения",
    "mode": "link",
    "links": [
      "29648253e1a49a43"
    ],
    "x": 1365,
    "y": 300,
    "wires": [],
    "info": "Выходная связь между потоками Node-RED."
  },
  {
    "id": "011145a067c9be39",
    "type": "function",
    "z": "c0bf68bfbce72297",
    "name": "Обработка уставок с HMI",
    "func": "const setpointsToManage = [\n    { globalName: \"Tmax\", readAddr: 0, newWriteAddr: 1000 }, { globalName: \"Tmin\", readAddr: 2, newWriteAddr: 1002 },\n    { globalName: \"tau_p\", readAddr: 4, newWriteAddr: 1004 }, { globalName: \"tau_i\", readAddr: 6, newWriteAddr: 1006 },\n    { globalName: \"Twdt\", readAddr: 8, newWriteAddr: 1008 }, { globalName: \"w\", readAddr: 10, newWriteAddr: 1010 },\n    { globalName: \"t\", readAddr: 12, newWriteAddr: 1012 }, { globalName: \"Const\", readAddr: 14, newWriteAddr: 1014 },\n    { globalName: \"K1\", readAddr: 16, newWriteAddr: 1016 }, { globalName: \"const1\", readAddr: 18, newWriteAddr: 1018 },\n    { globalName: \"K2\", readAddr: 20, newWriteAddr: 1020 }, { globalName: \"const2\", readAddr: 22, newWriteAddr: 1022 },\n    { globalName: \"K3\", readAddr: 24, newWriteAddr: 1024 }, { globalName: \"const3\", readAddr: 26, newWriteAddr: 1026 },\n    { globalName: \"K4\", readAddr: 28, newWriteAddr: 1028 }, { globalName: \"const4\", readAddr: 30, newWriteAddr: 1030 },\n    { globalName: \"k0\", readAddr: 32, newWriteAddr: 1032 }, { globalName: \"k1\", readAddr: 34, newWriteAddr: 1034 },\n    { globalName: \"k2\", readAddr: 36, newWriteAddr: 1036 }, { globalName: \"k3\", readAddr: 38, newWriteAddr: 1038 },\n    { globalName: \"k4\", readAddr: 40, newWriteAddr: 1040 }, { globalName: \"k5\", readAddr: 42, newWriteAddr: 1042 },\n    { globalName: \"k6\", readAddr: 44, newWriteAddr: 1044 }, { globalName: \"k7\", readAddr: 46, newWriteAddr: 1046 },\n    { globalName: \"k8\", readAddr: 48, newWriteAddr: 1048 }, { globalName: \"k9\", readAddr: 50, newWriteAddr: 1050 },\n    { globalName: \"k10\", readAddr: 52, newWriteAddr: 1052 },\n    { globalName: \"HMI_ResetCycle\", readAddr: 54, newWriteAddr: 1054 }, { globalName: \"HMI_StopCycle\", readAddr: 56, newWriteAddr: 1056 },\n    { globalName: \"HMI_ApplyAndSave\", readAddr: 58, newWriteAddr: 1058 }, { globalName: \"HMI_ReadFromFile\", readAddr: 60, newWriteAddr: 1060 },\n    { globalName: \"HMI_ManualMode\", readAddr: 62, newWriteAddr: 1062 }, { globalName: \"HMI_ManualValveState\", readAddr: 64, newWriteAddr: 1064 },\n    { globalName: \"HMI_LinkTest_Command\", readAddr: 66, newWriteAddr: 1066 }, { globalName: \"HMI_LinkTest_Echo\", readAddr: 68, newWriteAddr: 1068 }\n];\nconst polledRegisters = msg.payload.data || msg.payload;\nif (!Array.isArray(polledRegisters)) return [null, null];\nlet hmiMemory = flow.get('hmi_memory') || {};\nlet changesMadeCount = 0;\nfor (const sp of setpointsToManage) {\n    const baseIndexInPolledData = sp.newWriteAddr - 1000;\n    if ((baseIndexInPolledData + 1) >= polledRegisters.length) continue;\n    const word_CD_fromPoll = polledRegisters[baseIndexInPolledData];\n    const word_AB_fromPoll = polledRegisters[baseIndexInPolledData + 1];\n    const reorderedBufferABCD = Buffer.alloc(4);\n    reorderedBufferABCD.writeUInt16BE(word_AB_fromPoll, 0);\n    reorderedBufferABCD.writeUInt16BE(word_CD_fromPoll, 2);\n    const newDesiredValueFloat = reorderedBufferABCD.readFloatBE(0);\n    const startupTime = global.get('system_startup_time') || 0;\n    const gracePeriod = 10000; // 10 секунд\n    if ((Date.now() - startupTime < gracePeriod) && newDesiredValueFloat === 0) {\n        node.log(`Игнорирование нуля для ${sp.globalName} в стартовом окне.`);\n        hmiMemory[sp.newWriteAddr] = 0;\n        continue;\n    }\n    const lastPolledValueFloat = hmiMemory[sp.newWriteAddr];\n    if (typeof lastPolledValueFloat === 'undefined' || Math.abs(newDesiredValueFloat - lastPolledValueFloat) > 0.00001) {\n        let valueToSetGlobal = newDesiredValueFloat;\n        if (sp.globalName.startsWith(\"HMI_\")) { valueToSetGlobal = Math.round(newDesiredValueFloat); }\n        global.set(sp.globalName, valueToSetGlobal);\n        let uiState = global.get('uiStateCrystallization') || {};\n        uiState[sp.globalName] = valueToSetGlobal;\n        global.set('uiStateCrystallization', uiState);\n        changesMadeCount++;\n    }\n    hmiMemory[sp.newWriteAddr] = newDesiredValueFloat;\n}\nflow.set('hmi_memory', hmiMemory);\nlet uiTriggerMsg = null;\nlet saveTriggerMsg = null;\nif (changesMadeCount > 0) {\n    node.status({ fill: \"green\", shape: \"dot\", text: `Обновлено ${changesMadeCount} уставок` });\n    uiTriggerMsg = { payload: \"hmi_vars_changed\" };\n    saveTriggerMsg = { payload: \"write_request\" };\n} else {\n    node.status({ fill: \"grey\", shape: \"ring\", text: \"Опрос HMI: нет изменений\" });\n}\nreturn [uiTriggerMsg, saveTriggerMsg];",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1140,
    "y": 520,
    "wires": [
      [
        "46d2537a0c338453"
      ],
      [
        "401be6d911b0275d"
      ]
    ],
    "info": "Функция: Обработка уставок с HMI.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "65c637403045e1a9",
    "type": "link in",
    "z": "c0bf68bfbce72297",
    "name": "в сервер для заполнения",
    "links": [
      "e5f354f840e61f82"
    ],
    "x": 695,
    "y": 140,
    "wires": [
      [
        "006fe821b2a40c0b"
      ]
    ],
    "info": "Входная связь между потоками Node-RED."
  },
  {
    "id": "818cd58044471633",
    "type": "switch",
    "z": "c0bf68bfbce72297",
    "name": "Проверка инициализации",
    "property": "system_startup_time",
    "propertyType": "global",
    "rules": [
      {
        "t": "nnull"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 1,
    "x": 480,
    "y": 360,
    "wires": [
      [
        "8eb0fc64c2138be5"
      ]
    ],
    "info": "Узел типа switch."
  },
  {
    "id": "41634902d6ccd83e",
    "type": "function",
    "z": "c0bf68bfbce72297",
    "name": "Обработка уставок из Modbus Server",
    "func": "const setpointsToManage = [\n    { globalName: \"Tmax\", readAddr: 0, newWriteAddr: 1000 }, { globalName: \"Tmin\", readAddr: 2, newWriteAddr: 1002 },\n    { globalName: \"tau_p\", readAddr: 4, newWriteAddr: 1004 }, { globalName: \"tau_i\", readAddr: 6, newWriteAddr: 1006 },\n    { globalName: \"Twdt\", readAddr: 8, newWriteAddr: 1008 }, { globalName: \"w\", readAddr: 10, newWriteAddr: 1010 },\n    { globalName: \"t\", readAddr: 12, newWriteAddr: 1012 }, { globalName: \"Const\", readAddr: 14, newWriteAddr: 1014 },\n    { globalName: \"K1\", readAddr: 16, newWriteAddr: 1016 }, { globalName: \"const1\", readAddr: 18, newWriteAddr: 1018 },\n    { globalName: \"K2\", readAddr: 20, newWriteAddr: 1020 }, { globalName: \"const2\", readAddr: 22, newWriteAddr: 1022 },\n    { globalName: \"K3\", readAddr: 24, newWriteAddr: 1024 }, { globalName: \"const3\", readAddr: 26, newWriteAddr: 1026 },\n    { globalName: \"K4\", readAddr: 28, newWriteAddr: 1028 }, { globalName: \"const4\", readAddr: 30, newWriteAddr: 1030 },\n    { globalName: \"k0\", readAddr: 32, newWriteAddr: 1032 }, { globalName: \"k1\", readAddr: 34, newWriteAddr: 1034 },\n    { globalName: \"k2\", readAddr: 36, newWriteAddr: 1036 }, { globalName: \"k3\", readAddr: 38, newWriteAddr: 1038 },\n    { globalName: \"k4\", readAddr: 40, newWriteAddr: 1040 }, { globalName: \"k5\", readAddr: 42, newWriteAddr: 1042 },\n    { globalName: \"k6\", readAddr: 44, newWriteAddr: 1044 }, { globalName: \"k7\", readAddr: 46, newWriteAddr: 1046 },\n    { globalName: \"k8\", readAddr: 48, newWriteAddr: 1048 }, { globalName: \"k9\", readAddr: 50, newWriteAddr: 1050 },\n    { globalName: \"k10\", readAddr: 52, newWriteAddr: 1052 },\n    { globalName: \"HMI_ResetCycle\", readAddr: 54, newWriteAddr: 1054 }, { globalName: \"HMI_StopCycle\", readAddr: 56, newWriteAddr: 1056 },\n    { globalName: \"HMI_ApplyAndSave\", readAddr: 58, newWriteAddr: 1058 }, { globalName: \"HMI_ReadFromFile\", readAddr: 60, newWriteAddr: 1060 },\n    { globalName: \"HMI_ManualMode\", readAddr: 62, newWriteAddr: 1062 }, { globalName: \"HMI_ManualValveState\", readAddr: 64, newWriteAddr: 1064 }\n];\n// Determine start address and register values from Modbus Server write\nlet startAddr;\nlet registers = [];\nif (msg.address !== undefined) {\n    startAddr = msg.address;\n}\nif (msg.payload) {\n    if (msg.payload.address !== undefined) {\n        startAddr = msg.payload.address;\n    }\n    if (Array.isArray(msg.payload)) {\n        registers = msg.payload;\n    }\n    if (msg.payload.value !== undefined) {\n        const val = msg.payload.value;\n        if (Array.isArray(val)) {\n            registers = val;\n        } else if (Buffer.isBuffer(val)) {\n            for (let i = 0; i < val.length; i += 2) {\n                registers.push(val.readUInt16BE(i));\n            }\n        }\n    }\n}\n// if no registers or no address, do nothing\nif (registers.length === 0 || typeof startAddr === 'undefined') {\n    return [null, null];\n}\nlet hmiMemory = flow.get('hmi_memory') || {};\nlet changesMadeCount = 0;\nfor (const sp of setpointsToManage) {\n    const index = sp.newWriteAddr - startAddr;\n    if (index >= 0 && (index + 1) < registers.length) {\n        const word_CD_fromWrite = registers[index];\n        const word_AB_fromWrite = registers[index + 1];\n        const reorderedBuffer = Buffer.alloc(4);\n        reorderedBuffer.writeUInt16BE(word_AB_fromWrite, 0);\n        reorderedBuffer.writeUInt16BE(word_CD_fromWrite, 2);\n        const newValueFloat = reorderedBuffer.readFloatBE(0);\n        const startupTime = global.get('system_startup_time') || 0;\n        const gracePeriod = 10000;\n        if ((Date.now() - startupTime < gracePeriod) && newValueFloat === 0) {\n            hmiMemory[sp.newWriteAddr] = 0;\n            continue;\n        }\n        const lastVal = hmiMemory[sp.newWriteAddr];\n        if (typeof lastVal === 'undefined' || Math.abs(newValueFloat - lastVal) > 0.00001) {\n            let valueToSet = newValueFloat;\n            if (sp.globalName.startsWith('HMI_')) {\n                valueToSet = Math.round(newValueFloat);\n            }\n            global.set(sp.globalName, valueToSet);\n            let uiState = global.get('uiStateCrystallization') || {};\n            uiState[sp.globalName] = valueToSet;\n            global.set('uiStateCrystallization', uiState);\n            changesMadeCount++;\n        }\n        hmiMemory[sp.newWriteAddr] = newValueFloat;\n    }\n}\nflow.set('hmi_memory', hmiMemory);\nlet uiTriggerMsg = null;\nlet saveTriggerMsg = null;\nif (changesMadeCount > 0) {\n    uiTriggerMsg = { payload: 'hmi_vars_changed' };\n    saveTriggerMsg = { payload: 'write_request' };\n}\nreturn [uiTriggerMsg, saveTriggerMsg];",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1090,
    "y": 300,
    "wires": [
      [
        "46d2537a0c338453"
      ],
      [
        "401be6d911b0275d"
      ]
    ],
    "info": "Функция: Обработка уставок из Modbus Server.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "8eb0fc64c2138be5",
    "type": "function",
    "z": "c0bf68bfbce72297",
    "name": "Сформировать запрос на чтение",
    "func": "const startAddress = 1000;\nconst variableCount = 35;\nconst quantityToRead = variableCount * 2;\nmsg.payload = {\n    'fc': 3,\n    'unitid': 1,\n    'address': startAddress,\n    'quantity': quantityToRead\n};\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 740,
    "y": 460,
    "wires": [
      [
        "62036f70ad9c6a0e"
      ]
    ],
    "info": "Функция: Сформировать запрос на чтение.\nНазначение: обработка данных или управление логикой процесса."
  },
  {
    "id": "373f7400cca2ba5d",
    "type": "inject",
    "z": "d6343c4f851076e5",
    "name": "Таймер (1 сек) — единый цикл",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "1",
    "crontab": "",
    "once": true,
    "onceDelay": "0.5",
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 300,
    "y": 140,
    "wires": [
      [
        "d7fe08f3a4c7a4e1",
        "f75863ec196a20f0",
        "8caf64eb9014b705",
        "b44e6db9bafcabb8",
        "18c4c8f26a8218a0",
        "d7fceb629cece3dd",
        "60ff65dd31239edd",
        "953dd50268ee2674",
        "06c972e50a814015",
        "e2b00b76489b31af",
        "16568fcd168f4c1a",
        "92400685d73b9991"
      ]
    ],
    "info": "Единый системный тик: раз в 1 секунду опрашиваем 4 глобальные переменные и обновляем AO."
  },
  {
    "id": "d0161f4ae2c86028",
    "type": "inject",
    "z": "d6343c4f851076e5",
    "name": "Безопасная инициализация (AO=минимум)",
    "props": [
      {
        "p": "payload",
        "v": "0",
        "vt": "num"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": "0.1",
    "topic": "safe_init",
    "x": 510,
    "y": 20,
    "wires": [
      [
        "31dce0ceb02db950",
        "c673361aff1b3d7d",
        "fc78948d133fb587",
        "e22f7f94887a020b"
      ]
    ],
    "info": "На старте отправляет 0 (сырые счётчики) во все каналы → 4 мА на каждом AO."
  },
  {
    "id": "31dce0ceb02db950",
    "type": "rbe",
    "z": "d6343c4f851076e5",
    "name": "Только при изменении (AO0)",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "property": "payload",
    "x": 1130,
    "y": 80,
    "wires": [
      [
        "c9dd16060aacfbbd"
      ]
    ]
  },
  {
    "id": "a866867729c0120d",
    "type": "ADAM-write",
    "z": "d6343c4f851076e5",
    "name": "AO0 → 6224@192.168.2.2",
    "host": "192.168.2.2",
    "serialPortCfg": "",
    "unit_id": 1,
    "write_ch": "0",
    "write_ch_type": "write_ao_1",
    "reconnecttimeout": "",
    "Series": "mbtcp",
    "advDevTypeTCP": "ADAM-6224",
    "advDevTypeRTU": "ADAM-4022T",
    "advDevType": "ADAM-6224",
    "x": 1720,
    "y": 80,
    "wires": []
  },
  {
    "id": "c673361aff1b3d7d",
    "type": "rbe",
    "z": "d6343c4f851076e5",
    "name": "Только при изменении (AO1)",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "property": "payload",
    "x": 1150,
    "y": 140,
    "wires": [
      [
        "791494de877b13a0"
      ]
    ]
  },
  {
    "id": "691d93218e7b8633",
    "type": "ADAM-write",
    "z": "d6343c4f851076e5",
    "name": "AO1 → 6224@192.168.2.2",
    "host": "192.168.2.2",
    "serialPortCfg": "",
    "unit_id": 1,
    "write_ch": "1",
    "write_ch_type": "write_ao_1",
    "reconnecttimeout": "",
    "Series": "mbtcp",
    "advDevTypeTCP": "ADAM-6224",
    "advDevTypeRTU": "ADAM-4022T",
    "advDevType": "ADAM-6224",
    "x": 1720,
    "y": 120,
    "wires": []
  },
  {
    "id": "fc78948d133fb587",
    "type": "rbe",
    "z": "d6343c4f851076e5",
    "name": "Только при изменении (AO2)",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "property": "payload",
    "x": 1150,
    "y": 200,
    "wires": [
      [
        "480c09d0d1191b5a"
      ]
    ]
  },
  {
    "id": "eadd70a03b69a8b2",
    "type": "ADAM-write",
    "z": "d6343c4f851076e5",
    "name": "AO2 → 6224@192.168.2.2",
    "host": "192.168.2.2",
    "serialPortCfg": "",
    "unit_id": 1,
    "write_ch": "2",
    "write_ch_type": "write_ao_1",
    "reconnecttimeout": "",
    "Series": "mbtcp",
    "advDevTypeTCP": "ADAM-6224",
    "advDevTypeRTU": "ADAM-4022T",
    "advDevType": "ADAM-6224",
    "x": 1720,
    "y": 180,
    "wires": []
  },
  {
    "id": "e22f7f94887a020b",
    "type": "rbe",
    "z": "d6343c4f851076e5",
    "name": "Только при изменении (AO3)",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "property": "payload",
    "x": 1150,
    "y": 260,
    "wires": [
      [
        "fa5c7498305a5bf0"
      ]
    ]
  },
  {
    "id": "f7693ff1febd68f9",
    "type": "ADAM-write",
    "z": "d6343c4f851076e5",
    "name": "AO3 → 6224@192.168.2.2",
    "host": "192.168.2.2",
    "serialPortCfg": "",
    "unit_id": 1,
    "write_ch": "3",
    "write_ch_type": "write_ao_1",
    "reconnecttimeout": "",
    "Series": "mbtcp",
    "advDevTypeTCP": "ADAM-6224",
    "advDevTypeRTU": "ADAM-4022T",
    "advDevType": "ADAM-6224",
    "x": 1720,
    "y": 240,
    "wires": []
  },
  {
    "id": "21a7b8d3f8c48afc",
    "type": "comment",
    "z": "d6343c4f851076e5",
    "name": "Схема",
    "info": "• Единый цикл 1 с → четыре ветки AO0..AO3.\n• Пер‑канальное масштабирование узлом range.\n• Узел rbe пропускает только изменения (экономия трафика).\n• Безопасная инициализация: на старте отправляется 0 → 4 мА.\n• Писатель ADAM-write на 192.168.2.2 для каждого AO.\n",
    "x": 250,
    "y": 80,
    "wires": []
  },
  {
    "id": "b59dd36c238a595f",
    "type": "ADAM-read",
    "z": "d6343c4f851076e5",
    "name": "",
    "rate": 2000,
    "host": "192.168.2.2",
    "serialPortCfg": "",
    "unit_id": 1,
    "readDI": false,
    "readDO": true,
    "readAI": true,
    "readAO": true,
    "reconnecttimeout": "",
    "mboutputStyle": "Multiple Outputs",
    "Series": "mbtcp",
    "advDevTypeTCP": "ADAM-6224",
    "advDevTypeRTU": "ADAM-4015",
    "advDevType": "ADAM-6224",
    "outputs": 4,
    "x": 1680,
    "y": 360,
    "wires": [
      [
        "6613c655e1b26243"
      ],
      [
        "d1da3dae091119f9"
      ],
      [
        "6d97f04ee624fa4d"
      ],
      [
        "3ff192e19e51cee6"
      ]
    ]
  },
  {
    "id": "c9dd16060aacfbbd",
    "type": "function",
    "z": "d6343c4f851076e5",
    "name": "Block if manual mode",
    "func": "if (global.get('ao_manual_mode')) {\n    return null;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1440,
    "y": 80,
    "wires": [
      [
        "a866867729c0120d"
      ]
    ]
  },
  {
    "id": "791494de877b13a0",
    "type": "function",
    "z": "d6343c4f851076e5",
    "name": "Block if manual mode",
    "func": "if (global.get('ao_manual_mode')) {\n    return null;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1460,
    "y": 140,
    "wires": [
      [
        "691d93218e7b8633"
      ]
    ]
  },
  {
    "id": "480c09d0d1191b5a",
    "type": "function",
    "z": "d6343c4f851076e5",
    "name": "Block if manual mode",
    "func": "if (global.get('ao_manual_mode')) {\n    return null;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1460,
    "y": 200,
    "wires": [
      [
        "eadd70a03b69a8b2"
      ]
    ]
  },
  {
    "id": "fa5c7498305a5bf0",
    "type": "function",
    "z": "d6343c4f851076e5",
    "name": "Block if manual mode",
    "func": "if (global.get('ao_manual_mode')) {\n    return null;\n}\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 1440,
    "y": 260,
    "wires": [
      [
        "f7693ff1febd68f9"
      ]
    ]
  },
  {
    "id": "bc1c691a8e095e53",
    "type": "ui_switch",
    "z": "d6343c4f851076e5",
    "name": "Ручной режим AO",
    "label": "Ручной режим AO",
    "tooltip": "",
    "group": "manual_ao_group",
    "order": 1,
    "width": 6,
    "height": 1,
    "passthru": true,
    "decouple": "false",
    "topic": "ao_manual_mode",
    "topicType": "str",
    "style": "",
    "onvalue": "true",
    "onvalueType": "bool",
    "offvalue": "false",
    "offvalueType": "bool",
    "x": 1130,
    "y": 420,
    "wires": [
      [
        "e1e1c993ea8fa8ca"
      ]
    ]
  },
  {
    "id": "e1e1c993ea8fa8ca",
    "type": "change",
    "z": "d6343c4f851076e5",
    "name": "Set global.ao_manual_mode",
    "rules": [
      {
        "t": "set",
        "p": "ao_manual_mode",
        "pt": "global",
        "to": "payload",
        "tot": "msg"
      }
    ],
    "x": 1390,
    "y": 420,
    "wires": [
      []
    ]
  },
  {
    "id": "e703eeb9e8b9b3ae",
    "type": "ui_numeric",
    "z": "d6343c4f851076e5",
    "name": "AO0 мА",
    "label": "AO0 мА",
    "tooltip": "",
    "group": "manual_ao_group",
    "order": 2,
    "width": 6,
    "height": 1,
    "wrap": false,
    "passthru": true,
    "topic": "ao_manual_ch0",
    "topicType": "str",
    "format": "{{value}}",
    "min": 4,
    "max": 20,
    "step": 0.01,
    "className": "",
    "x": 1130,
    "y": 480,
    "wires": [
      [
        "f2ded247f116c0d4"
      ]
    ]
  },
  {
    "id": "d4880749172442d0",
    "type": "ui_numeric",
    "z": "d6343c4f851076e5",
    "name": "AO1 мА",
    "label": "AO1 мА",
    "group": "manual_ao_group",
    "order": 3,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "ao_manual_ch1",
    "topicType": "str",
    "format": "{{value}}",
    "min": 4,
    "max": 20,
    "step": 0.01,
    "x": 1130,
    "y": 540,
    "wires": [
      [
        "f2ded247f116c0d4"
      ]
    ]
  },
  {
    "id": "3c1b39e4d1a86483",
    "type": "ui_numeric",
    "z": "d6343c4f851076e5",
    "name": "AO2 мА",
    "label": "AO2 мА",
    "group": "manual_ao_group",
    "order": 4,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "ao_manual_ch2",
    "topicType": "str",
    "format": "{{value}}",
    "min": 4,
    "max": 20,
    "step": 0.01,
    "x": 1130,
    "y": 600,
    "wires": [
      [
        "f2ded247f116c0d4"
      ]
    ]
  },
  {
    "id": "243b59a36088affa",
    "type": "ui_numeric",
    "z": "d6343c4f851076e5",
    "name": "AO3 мА",
    "label": "AO3 мА",
    "group": "manual_ao_group",
    "order": 5,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "ao_manual_ch3",
    "topicType": "str",
    "format": "{{value}}",
    "min": 4,
    "max": 20,
    "step": 0.01,
    "x": 1130,
    "y": 660,
    "wires": [
      [
        "f2ded247f116c0d4"
      ]
    ]
  },
  {
    "id": "f2ded247f116c0d4",
    "type": "function",
    "z": "d6343c4f851076e5",
    "name": "Manual AO Handler",
    "func": "\nconst manualMode = global.get(\"ao_manual_mode\");\nif (!manualMode) return [null, null, null, null]; // Автоматический режим - игнорируем\n\nconst topic = msg.topic;\nconst value_mA = Number(msg.payload);\nif (isNaN(value_mA) || value_mA < 4 || value_mA > 20) return [null, null, null, null];\n\n// Масштабируем 4-20 мА в 0-4095\nconst scaled = Math.round((value_mA - 4) * (4095 / (20 - 4)));\n\nlet out = [null, null, null, null];\nif (topic === \"ao_manual_ch0\") out[0] = { payload: scaled };\nif (topic === \"ao_manual_ch1\") out[1] = { payload: scaled };\nif (topic === \"ao_manual_ch2\") out[2] = { payload: scaled };\nif (topic === \"ao_manual_ch3\") out[3] = { payload: scaled };\n\nreturn out;\n",
    "outputs": 4,
    "noerr": 0,
    "x": 1400,
    "y": 580,
    "wires": [
      [
        "2432e95235f10130"
      ],
      [
        "582791a2bf9d6382"
      ],
      [
        "86496582c0578fb8"
      ],
      [
        "a5f768c6a45f16d2"
      ]
    ]
  },
  {
    "id": "d7fe08f3a4c7a4e1",
    "type": "function",
    "z": "d6343c4f851076e5",
    "name": "AO1 compute RAW universal",
    "func": "// Универсальная функция для AO1\nvar i = 1;\nvar keyString = global.get('AO' + i + '_key');\nvar mA = 4; // значение по умолчанию 4 мА, если что-то не так\nif (typeof keyString === 'string') {\n    var tokens = keyString.split(';').map(function(s) { return s.trim(); });\n    if (tokens.length >= 4) {\n        var k = parseFloat(tokens[1]);\n        var b = parseFloat(tokens[2]);\n        var varName = tokens[3];\n        var v = global.get(varName);\n        if (typeof v !== 'number' || !isFinite(v)) { v = 0; }\n        mA = v * k + b;\n    }\n}\n// ограничиваем диапазон 4–20 мА\nif (mA < 4) { mA = 4; }\nif (mA > 20) { mA = 20; }\nvar raw = Math.round((mA - 4) / 16 * 4095);\nmsg.payload = raw;\nmsg.parts = { id: 'ao', index: i, count: 4 };\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 700,
    "y": 140,
    "wires": [
      [
        "c673361aff1b3d7d"
      ]
    ]
  },
  {
    "id": "f75863ec196a20f0",
    "type": "function",
    "z": "d6343c4f851076e5",
    "name": "AO2 compute RAW universal",
    "func": "// Универсальная функция для AO2\nvar i = 2;\nvar keyString = global.get('AO' + i + '_key');\nvar mA = 4; // значение по умолчанию 4 мА, если что-то не так\nif (typeof keyString === 'string') {\n    var tokens = keyString.split(';').map(function(s) { return s.trim(); });\n    if (tokens.length >= 4) {\n        var k = parseFloat(tokens[1]);\n        var b = parseFloat(tokens[2]);\n        var varName = tokens[3];\n        var v = global.get(varName);\n        if (typeof v !== 'number' || !isFinite(v)) { v = 0; }\n        mA = v * k + b;\n    }\n}\n// ограничиваем диапазон 4–20 мА\nif (mA < 4) { mA = 4; }\nif (mA > 20) { mA = 20; }\nvar raw = Math.round((mA - 4) / 16 * 4095);\nmsg.payload = raw;\nmsg.parts = { id: 'ao', index: i, count: 4 };\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 700,
    "y": 200,
    "wires": [
      [
        "fc78948d133fb587"
      ]
    ]
  },
  {
    "id": "8caf64eb9014b705",
    "type": "function",
    "z": "d6343c4f851076e5",
    "name": "AO3 compute RAW universal",
    "func": "// Универсальная функция для AO3\nvar i = 3;\nvar keyString = global.get('AO' + i + '_key');\nvar mA = 4; // значение по умолчанию 4 мА, если что-то не так\nif (typeof keyString === 'string') {\n    var tokens = keyString.split(';').map(function(s) { return s.trim(); });\n    if (tokens.length >= 4) {\n        var k = parseFloat(tokens[1]);\n        var b = parseFloat(tokens[2]);\n        var varName = tokens[3];\n        var v = global.get(varName);\n        if (typeof v !== 'number' || !isFinite(v)) { v = 0; }\n        mA = v * k + b;\n    }\n}\n// ограничиваем диапазон 4–20 мА\nif (mA < 4) { mA = 4; }\nif (mA > 20) { mA = 20; }\nvar raw = Math.round((mA - 4) / 16 * 4095);\nmsg.payload = raw;\nmsg.parts = { id: 'ao', index: i, count: 4 };\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 700,
    "y": 260,
    "wires": [
      [
        "e22f7f94887a020b"
      ]
    ]
  },
  {
    "id": "b44e6db9bafcabb8",
    "type": "function",
    "z": "d6343c4f851076e5",
    "name": "AO0 compute RAW universal",
    "func": "// Универсальная функция для AO0\nvar i = 0;\nvar keyString = global.get('AO' + i + '_key');\nvar mA = 4; // значение по умолчанию 4 мА, если что-то не так\nif (typeof keyString === 'string') {\n    var tokens = keyString.split(';').map(function(s) { return s.trim(); });\n    if (tokens.length >= 4) {\n        var k = parseFloat(tokens[1]);\n        var b = parseFloat(tokens[2]);\n        var varName = tokens[3];\n        var v = global.get(varName);\n        if (typeof v !== 'number' || !isFinite(v)) { v = 0; }\n        mA = v * k + b;\n    }\n}\n// ограничиваем диапазон 4–20 мА\nif (mA < 4) { mA = 4; }\nif (mA > 20) { mA = 20; }\nvar raw = Math.round((mA - 4) / 16 * 4095);\nmsg.payload = raw;\nmsg.parts = { id: 'ao', index: i, count: 4 };\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 700,
    "y": 80,
    "wires": [
      [
        "31dce0ceb02db950"
      ]
    ]
  },
  {
    "id": "18c4c8f26a8218a0",
    "type": "change",
    "z": "d6343c4f851076e5",
    "name": "Чтение AO0_key",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "AO0_key",
        "tot": "global"
      }
    ],
    "x": 490,
    "y": 400,
    "wires": [
      [
        "2cb7c62532bc199e"
      ]
    ]
  },
  {
    "id": "2cb7c62532bc199e",
    "type": "ui_text",
    "z": "d6343c4f851076e5",
    "group": "manual_ao_group",
    "order": 6,
    "width": "",
    "height": "",
    "name": "AO0_key",
    "label": "AO0_key",
    "format": "{{msg.payload}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": "",
    "color": "#000000",
    "x": 690,
    "y": 400,
    "wires": []
  },
  {
    "id": "d7fceb629cece3dd",
    "type": "function",
    "z": "d6343c4f851076e5",
    "name": "Вычислить AO0 мА",
    "func": "// вычисляем ток в мА для AO0\nvar cfg = global.get('AO_CFG');\nvar c   = cfg ? cfg[0] : null;\nif (!c) return null;\nvar v = global.get(c.var);\nif (typeof v !== 'number' || isNaN(v)) v = 0;\nvar mA = v * c.k + c.b;\nif (mA < 4)  mA = 4;\nif (mA > 20) mA = 20;\nmsg.payload = mA.toFixed(2) + \" мА\";\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 490,
    "y": 440,
    "wires": [
      [
        "3e1c381b4c17d7cd"
      ]
    ]
  },
  {
    "id": "3e1c381b4c17d7cd",
    "type": "ui_text",
    "z": "d6343c4f851076e5",
    "group": "manual_ao_group",
    "order": 7,
    "width": "",
    "height": "",
    "name": "AO0_mA",
    "label": "AO0 ток",
    "format": "{{msg.payload}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": "",
    "color": "#000000",
    "x": 690,
    "y": 440,
    "wires": []
  },
  {
    "id": "60ff65dd31239edd",
    "type": "change",
    "z": "d6343c4f851076e5",
    "name": "Чтение AO1_key",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "AO1_key",
        "tot": "global"
      }
    ],
    "x": 470,
    "y": 480,
    "wires": [
      [
        "f0bc89d0aeb4b150"
      ]
    ]
  },
  {
    "id": "f0bc89d0aeb4b150",
    "type": "ui_text",
    "z": "d6343c4f851076e5",
    "group": "manual_ao_group",
    "order": 8,
    "width": "",
    "height": "",
    "name": "AO1_key",
    "label": "AO1_key",
    "format": "{{msg.payload}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": "",
    "color": "#000000",
    "x": 670,
    "y": 480,
    "wires": []
  },
  {
    "id": "953dd50268ee2674",
    "type": "function",
    "z": "d6343c4f851076e5",
    "name": "Вычислить AO1 мА",
    "func": "var cfg = global.get('AO_CFG');\nvar c = cfg ? cfg[1] : null;\nif (!c) return null;\nvar v = global.get(c.var);\nif (typeof v !== 'number' || isNaN(v)) v = 0;\nvar mA = v * c.k + c.b;\nif (mA < 4) mA = 4;\nif (mA > 20) mA = 20;\nmsg.payload = mA.toFixed(2) + ' мА';\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 470,
    "y": 520,
    "wires": [
      [
        "ac51ca21f9f595d7"
      ]
    ]
  },
  {
    "id": "ac51ca21f9f595d7",
    "type": "ui_text",
    "z": "d6343c4f851076e5",
    "group": "manual_ao_group",
    "order": 9,
    "width": "",
    "height": "",
    "name": "AO1_mA",
    "label": "AO1 ток",
    "format": "{{msg.payload}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": "",
    "color": "#000000",
    "x": 670,
    "y": 520,
    "wires": []
  },
  {
    "id": "06c972e50a814015",
    "type": "change",
    "z": "d6343c4f851076e5",
    "name": "Чтение AO2_key",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "AO2_key",
        "tot": "global"
      }
    ],
    "x": 470,
    "y": 560,
    "wires": [
      [
        "5fce693f906875d7"
      ]
    ]
  },
  {
    "id": "5fce693f906875d7",
    "type": "ui_text",
    "z": "d6343c4f851076e5",
    "group": "manual_ao_group",
    "order": 10,
    "width": "",
    "height": "",
    "name": "AO2_key",
    "label": "AO2_key",
    "format": "{{msg.payload}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": "",
    "color": "#000000",
    "x": 670,
    "y": 560,
    "wires": []
  },
  {
    "id": "e2b00b76489b31af",
    "type": "function",
    "z": "d6343c4f851076e5",
    "name": "Вычислить AO2 мА",
    "func": "var cfg = global.get('AO_CFG');\nvar c = cfg ? cfg[2] : null;\nif (!c) return null;\nvar v = global.get(c.var);\nif (typeof v !== 'number' || isNaN(v)) v = 0;\nvar mA = v * c.k + c.b;\nif (mA < 4) mA = 4;\nif (mA > 20) mA = 20;\nmsg.payload = mA.toFixed(2) + ' мА';\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 470,
    "y": 600,
    "wires": [
      [
        "61d850ae8dc5ef37"
      ]
    ]
  },
  {
    "id": "61d850ae8dc5ef37",
    "type": "ui_text",
    "z": "d6343c4f851076e5",
    "group": "manual_ao_group",
    "order": 11,
    "width": "",
    "height": "",
    "name": "AO2_mA",
    "label": "AO2 ток",
    "format": "{{msg.payload}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": "",
    "color": "#000000",
    "x": 670,
    "y": 600,
    "wires": []
  },
  {
    "id": "16568fcd168f4c1a",
    "type": "change",
    "z": "d6343c4f851076e5",
    "name": "Чтение AO3_key",
    "rules": [
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "AO3_key",
        "tot": "global"
      }
    ],
    "x": 470,
    "y": 640,
    "wires": [
      [
        "aa76f90baba537cd"
      ]
    ]
  },
  {
    "id": "aa76f90baba537cd",
    "type": "ui_text",
    "z": "d6343c4f851076e5",
    "group": "manual_ao_group",
    "order": 12,
    "width": "",
    "height": "",
    "name": "AO3_key",
    "label": "AO3_key",
    "format": "{{msg.payload}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": "",
    "color": "#000000",
    "x": 670,
    "y": 640,
    "wires": []
  },
  {
    "id": "92400685d73b9991",
    "type": "function",
    "z": "d6343c4f851076e5",
    "name": "Вычислить AO3 мА",
    "func": "var cfg = global.get('AO_CFG');\nvar c = cfg ? cfg[3] : null;\nif (!c) return null;\nvar v = global.get(c.var);\nif (typeof v !== 'number' || isNaN(v)) v = 0;\nvar mA = v * c.k + c.b;\nif (mA < 4) mA = 4;\nif (mA > 20) mA = 20;\nmsg.payload = mA.toFixed(2) + ' мА';\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 470,
    "y": 680,
    "wires": [
      [
        "50832b5dbe3cc330"
      ]
    ]
  },
  {
    "id": "50832b5dbe3cc330",
    "type": "ui_text",
    "z": "d6343c4f851076e5",
    "group": "manual_ao_group",
    "order": 13,
    "width": "",
    "height": "",
    "name": "AO3_mA",
    "label": "AO3 ток",
    "format": "{{msg.payload}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": "",
    "color": "#000000",
    "x": 670,
    "y": 680,
    "wires": []
  },
  {
    "id": "6613c655e1b26243",
    "type": "range",
    "z": "d6343c4f851076e5",
    "minin": "0",
    "maxin": "4095",
    "minout": "4",
    "maxout": "20",
    "action": "scale",
    "round": false,
    "property": "payload",
    "name": "",
    "x": 1990,
    "y": 260,
    "wires": [
      [
        "4ba24009d093ab1f"
      ]
    ]
  },
  {
    "id": "4ba24009d093ab1f",
    "type": "ui_text",
    "z": "d6343c4f851076e5",
    "group": "manual_ao_group",
    "order": 7,
    "width": "",
    "height": "",
    "name": "AO0_mA",
    "label": "AO0 ток факт",
    "format": "{{msg.payload | number:2}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": "",
    "color": "#000000",
    "x": 2160,
    "y": 260,
    "wires": []
  },
  {
    "id": "f3f178ce735e3a40",
    "type": "ui_text",
    "z": "d6343c4f851076e5",
    "group": "manual_ao_group",
    "order": 9,
    "width": "",
    "height": "",
    "name": "AO1_mA",
    "label": "AO1 ток факт",
    "format": "{{msg.payload | number:2}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": "",
    "color": "#000000",
    "x": 2160,
    "y": 300,
    "wires": []
  },
  {
    "id": "f6386fe39b430455",
    "type": "ui_text",
    "z": "d6343c4f851076e5",
    "group": "manual_ao_group",
    "order": 11,
    "width": "",
    "height": "",
    "name": "AO2_mA",
    "label": "AO2 ток факт",
    "format": "{{msg.payload | number:2}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": "",
    "color": "#000000",
    "x": 2160,
    "y": 340,
    "wires": []
  },
  {
    "id": "a88fddf637468893",
    "type": "ui_text",
    "z": "d6343c4f851076e5",
    "group": "manual_ao_group",
    "order": 13,
    "width": "",
    "height": "",
    "name": "AO3_mA",
    "label": "AO3 ток факт",
    "format": "{{msg.payload | number:2}}",
    "layout": "row-spread",
    "className": "",
    "style": false,
    "font": "",
    "fontSize": "",
    "color": "#000000",
    "x": 2160,
    "y": 380,
    "wires": []
  },
  {
    "id": "d1da3dae091119f9",
    "type": "range",
    "z": "d6343c4f851076e5",
    "minin": "0",
    "maxin": "4095",
    "minout": "4",
    "maxout": "20",
    "action": "scale",
    "round": false,
    "property": "payload",
    "name": "",
    "x": 1990,
    "y": 300,
    "wires": [
      [
        "f3f178ce735e3a40"
      ]
    ]
  },
  {
    "id": "6d97f04ee624fa4d",
    "type": "range",
    "z": "d6343c4f851076e5",
    "minin": "0",
    "maxin": "4095",
    "minout": "4",
    "maxout": "20",
    "action": "scale",
    "round": false,
    "property": "payload",
    "name": "",
    "x": 1990,
    "y": 340,
    "wires": [
      [
        "f6386fe39b430455"
      ]
    ]
  },
  {
    "id": "3ff192e19e51cee6",
    "type": "range",
    "z": "d6343c4f851076e5",
    "minin": "0",
    "maxin": "4095",
    "minout": "4",
    "maxout": "20",
    "action": "scale",
    "round": false,
    "property": "payload",
    "name": "",
    "x": 1990,
    "y": 380,
    "wires": [
      [
        "a88fddf637468893"
      ]
    ]
  },
  {
    "id": "54fa5ba35079e2ec",
    "type": "inject",
    "z": "f264eeefd9cbcd8c",
    "name": "Load AO Config (startup)",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.5,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 200,
    "y": 100,
    "wires": [
      [
        "f73544982c1ee3a6"
      ]
    ]
  },
  {
    "id": "0e2c22f2a9b203f6",
    "type": "inject",
    "z": "f264eeefd9cbcd8c",
    "name": "Load AO Config (2min)",
    "props": [
      {
        "p": "payload"
      }
    ],
    "repeat": "120",
    "crontab": "",
    "once": false,
    "onceDelay": 0,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 200,
    "y": 150,
    "wires": [
      [
        "f73544982c1ee3a6"
      ]
    ]
  },
  {
    "id": "f73544982c1ee3a6",
    "type": "file in",
    "z": "f264eeefd9cbcd8c",
    "name": "Read AO config file",
    "filename": "/home/root/.node-red/save/crystallization_params.jsonAO",
    "filenameType": "str",
    "format": "utf8",
    "chunk": false,
    "sendError": true,
    "encoding": "utf8",
    "allProps": false,
    "x": 490,
    "y": 120,
    "wires": [
      [
        "819b23c949661a64"
      ]
    ]
  },
  {
    "id": "819b23c949661a64",
    "type": "json",
    "z": "f264eeefd9cbcd8c",
    "name": "Parse JSON",
    "property": "payload",
    "action": "",
    "pretty": false,
    "x": 730,
    "y": 120,
    "wires": [
      [
        "1f8182680e616e0b"
      ]
    ]
  },
  {
    "id": "1f8182680e616e0b",
    "type": "function",
    "z": "f264eeefd9cbcd8c",
    "name": "Extract AO Keys",
    "func": "var cfg = {}\nvar settings = msg.payload.settings || msg.payload;\nfor (var i = 0; i < 4; i++) {\n    var keyName = `AO${i}_key`;\n    var key = settings[keyName];\n    if (typeof key === 'string') {\n        global.set(keyName, key);\n        // parse key into cfg\n        var parts = key.split(';').map(function(s) { return s.trim(); });\n        if (parts.length >= 4) {\n            var ch = parseInt(parts[0]);\n            var k = parseFloat(parts[1]);\n            var b = parseFloat(parts[2]);\n            var varName = parts[3];\n            if (!isNaN(ch) && isFinite(k) && isFinite(b) && typeof varName === 'string') {\n                cfg[i] = { ch: ch, k: k, b: b, var: varName };\n            }\n        }\n    }\n}\n// store config globally\nglobal.set('AO_CFG', cfg);\nreturn null;",
    "outputs": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 960,
    "y": 120,
    "wires": []
  },
  {
    "id": "2acf20f4a0074588",
    "type": "function",
    "z": "f60d96b31f20271a",
    "name": "Разложить параметры (refresh UI)",
    "func": "// 1. Получаем все параметры из глобального контекста\nconst uiState = global.get('uiStateCrystallization') || {};\n\n// 2. Создаем массив сообщений, где каждое сообщение - это отдельный параметр\nconst messages = [];\nfor (const key in uiState) {\n    if (uiState.hasOwnProperty(key)) {\n        messages.push({\n            payload: uiState[key], // Значение параметра\n            topic: key             // Имя параметра\n        });\n    }\n}\n\n// 3. Помещаем массив в msg.payload и отправляем на выход ОДНО сообщение\nmsg.payload = messages;\nreturn msg;\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 320,
    "y": 360,
    "wires": [
      [
        "ceb932752d434219"
      ]
    ],
    "info": ""
  },
  {
    "id": "ceb932752d434219",
    "type": "split",
    "z": "f60d96b31f20271a",
    "name": "split",
    "splt": "\n",
    "spltType": "str",
    "arraySplt": "1",
    "arraySpltType": "len",
    "stream": false,
    "addname": "",
    "x": 530,
    "y": 360,
    "wires": [
      [
        "change_flatten_1"
      ]
    ],
    "info": ""
  },
  {
    "id": "37b8e0b865634f00",
    "type": "switch",
    "z": "f60d96b31f20271a",
    "name": "Switch by param name",
    "property": "topic",
    "propertyType": "msg",
    "rules": [
      {
        "t": "eq",
        "v": "Tmax",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "Tmin",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "w",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "t",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "tau_p",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "tau_i",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "Twdt",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "Const",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "K1",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "const1",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "K2",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "const2",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "K3",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "const3",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "K4",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "const4",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "k0",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "k1",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "k2",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "k3",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "k4",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "k5",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "k6",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "k7",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "k8",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "k9",
        "vt": "str"
      },
      {
        "t": "eq",
        "v": "k10",
        "vt": "str"
      }
    ],
    "checkall": "true",
    "repair": false,
    "outputs": 27,
    "x": 750,
    "y": 360,
    "wires": [
      [
        "a70fa2304e36404d"
      ],
      [
        "9244d3dfee144b5a"
      ],
      [
        "477cf3b93d5942b9"
      ],
      [
        "740d3768268e4e80"
      ],
      [
        "7e1cbac492454d50"
      ],
      [
        "e7f9f14968314342"
      ],
      [
        "89a23bd1850a4e4a"
      ],
      [
        "287f0899e94a48f5"
      ],
      [
        "0cd0602106d646cd"
      ],
      [
        "74b2a2ff376b4bac"
      ],
      [
        "288139799e0143d2"
      ],
      [
        "9889afc6bbfc44be"
      ],
      [
        "181cbbe31af34aec"
      ],
      [
        "beaf8c4dc302475c"
      ],
      [
        "09798f9a453e46bd"
      ],
      [
        "1cba436efcf049d4"
      ],
      [
        "963b669c53f34d18"
      ],
      [
        "2298fbfdc7d04c45"
      ],
      [
        "210d64eda7174ba8"
      ],
      [
        "c97fba280d07492a"
      ],
      [
        "9d14d36daecc4075"
      ],
      [
        "6d8c80ef36cc4cd0"
      ],
      [
        "7f654d09a8e34f6a"
      ],
      [
        "93c3ead55ac140b2"
      ],
      [
        "82877b7223bf47d6"
      ],
      [
        "4e074a29fa584448"
      ],
      [
        "d72269009ab946f5"
      ]
    ],
    "info": ""
  },
  {
    "id": "a70fa2304e36404d",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "Tmax",
    "label": "Верхняя граница Tmax, °C",
    "group": "bf1dea3b0e4a4173",
    "order": 1,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "Tmax",
    "topicType": "str",
    "x": 500,
    "y": 100,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "9244d3dfee144b5a",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "Tmin",
    "label": "Нижняя граница Tmin, °C",
    "group": "bf1dea3b0e4a4173",
    "order": 2,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "Tmin",
    "topicType": "str",
    "x": 500,
    "y": 140,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "477cf3b93d5942b9",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "w",
    "label": "Ширина w",
    "group": "bf1dea3b0e4a4173",
    "order": 3,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "w",
    "topicType": "str",
    "x": 500,
    "y": 180,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "740d3768268e4e80",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "t",
    "label": "Время t",
    "group": "bf1dea3b0e4a4173",
    "order": 4,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "t",
    "topicType": "str",
    "x": 500,
    "y": 220,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "7e1cbac492454d50",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "tau_p",
    "label": "Tau_p",
    "group": "bf1dea3b0e4a4173",
    "order": 5,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "tau_p",
    "topicType": "str",
    "x": 500,
    "y": 260,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "e7f9f14968314342",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "tau_i",
    "label": "Tau_i",
    "group": "bf1dea3b0e4a4173",
    "order": 6,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "tau_i",
    "topicType": "str",
    "x": 500,
    "y": 300,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "89a23bd1850a4e4a",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "Twdt",
    "label": "Twdt",
    "group": "bf1dea3b0e4a4173",
    "order": 7,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "Twdt",
    "topicType": "str",
    "x": 500,
    "y": 340,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "287f0899e94a48f5",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "Const",
    "label": "Const",
    "group": "bf1dea3b0e4a4173",
    "order": 8,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "Const",
    "topicType": "str",
    "x": 500,
    "y": 380,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "0cd0602106d646cd",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "K1",
    "label": "K1",
    "group": "bf1dea3b0e4a4173",
    "order": 9,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "K1",
    "topicType": "str",
    "x": 500,
    "y": 420,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "74b2a2ff376b4bac",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "const1",
    "label": "const1",
    "group": "bf1dea3b0e4a4173",
    "order": 10,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "const1",
    "topicType": "str",
    "x": 500,
    "y": 460,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "288139799e0143d2",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "K2",
    "label": "K2",
    "group": "bf1dea3b0e4a4173",
    "order": 11,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "K2",
    "topicType": "str",
    "x": 500,
    "y": 500,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "9889afc6bbfc44be",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "const2",
    "label": "const2",
    "group": "bf1dea3b0e4a4173",
    "order": 12,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "const2",
    "topicType": "str",
    "x": 500,
    "y": 540,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "181cbbe31af34aec",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "K3",
    "label": "K3",
    "group": "bf1dea3b0e4a4173",
    "order": 13,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "K3",
    "topicType": "str",
    "x": 500,
    "y": 580,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "beaf8c4dc302475c",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "const3",
    "label": "const3",
    "group": "bf1dea3b0e4a4173",
    "order": 14,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "const3",
    "topicType": "str",
    "x": 500,
    "y": 620,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "09798f9a453e46bd",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "K4",
    "label": "K4",
    "group": "bf1dea3b0e4a4173",
    "order": 15,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "K4",
    "topicType": "str",
    "x": 500,
    "y": 660,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "1cba436efcf049d4",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "const4",
    "label": "const4",
    "group": "bf1dea3b0e4a4173",
    "order": 16,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "const4",
    "topicType": "str",
    "x": 500,
    "y": 700,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "963b669c53f34d18",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "k0",
    "label": "k0",
    "group": "b020d169c958d0c5",
    "order": 1,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "k0",
    "topicType": "str",
    "x": 800,
    "y": 100,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "2298fbfdc7d04c45",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "k1",
    "label": "k1",
    "group": "b020d169c958d0c5",
    "order": 2,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "k1",
    "topicType": "str",
    "x": 800,
    "y": 140,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "210d64eda7174ba8",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "k2",
    "label": "k2",
    "group": "b020d169c958d0c5",
    "order": 3,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "k2",
    "topicType": "str",
    "x": 800,
    "y": 180,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "c97fba280d07492a",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "k3",
    "label": "k3",
    "group": "b020d169c958d0c5",
    "order": 4,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "k3",
    "topicType": "str",
    "x": 800,
    "y": 220,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "9d14d36daecc4075",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "k4",
    "label": "k4",
    "group": "b020d169c958d0c5",
    "order": 5,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "k4",
    "topicType": "str",
    "x": 800,
    "y": 260,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "6d8c80ef36cc4cd0",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "k5",
    "label": "k5",
    "group": "b020d169c958d0c5",
    "order": 6,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "k5",
    "topicType": "str",
    "x": 800,
    "y": 300,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "7f654d09a8e34f6a",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "k6",
    "label": "k6",
    "group": "b020d169c958d0c5",
    "order": 7,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "k6",
    "topicType": "str",
    "x": 800,
    "y": 340,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "93c3ead55ac140b2",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "k7",
    "label": "k7",
    "group": "b020d169c958d0c5",
    "order": 8,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "k7",
    "topicType": "str",
    "x": 800,
    "y": 380,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "82877b7223bf47d6",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "k8",
    "label": "k8",
    "group": "b020d169c958d0c5",
    "order": 9,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "k8",
    "topicType": "str",
    "x": 800,
    "y": 420,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "4e074a29fa584448",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "k9",
    "label": "k9",
    "group": "b020d169c958d0c5",
    "order": 10,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "k9",
    "topicType": "str",
    "x": 800,
    "y": 460,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "d72269009ab946f5",
    "type": "ui_text_input",
    "z": "f60d96b31f20271a",
    "name": "k10",
    "label": "k10",
    "group": "b020d169c958d0c5",
    "order": 11,
    "width": 6,
    "height": 1,
    "passthru": true,
    "topic": "k10",
    "topicType": "str",
    "x": 800,
    "y": 500,
    "wires": [
      [
        "func_ui_numeric_handler"
      ]
    ],
    "info": "",
    "mode": "number",
    "delay": 300,
    "sendOnBlur": true
  },
  {
    "id": "change_flatten_1",
    "type": "change",
    "z": "f60d96b31f20271a",
    "name": "Flatten param",
    "rules": [
      {
        "t": "set",
        "p": "topic",
        "pt": "msg",
        "to": "payload.topic",
        "tot": "msg"
      },
      {
        "t": "set",
        "p": "payload",
        "pt": "msg",
        "to": "payload.payload",
        "tot": "msg"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 650,
    "y": 360,
    "wires": [
      [
        "37b8e0b865634f00"
      ]
    ],
    "info": ""
  },
  {
    "id": "func_ui_numeric_handler",
    "type": "function",
    "z": "f60d96b31f20271a",
    "name": "Обработчик ui_numeric изменений",
    "func": "// Новый обработчик для UI Numeric\n// Получает данные от всех полей ui_numeric\n\n// Получаем текущее состояние UI из глобального контекста\nlet uiState = global.get('uiStateCrystallization') || {};\nconst savedState = global.get('savedStateCrystallization') || {};\n\nconst varName = msg.topic; // Имя переменной берем из топика\nconst newValue = msg.payload;\n\n// Обновляем значение в объекте состояния\nif (typeof varName === 'string' && varName !== '') {\n    uiState[varName] = Number(newValue);\n    global.set('uiStateCrystallization', uiState);\n} else {\n    // Игнорируем сообщения без топика\n    return null;\n}\n\n// Сравниваем текущие значения в UI с последними сохраненными\nlet hasUnsavedChanges = false;\nfor (const key in uiState) {\n    // Проверяем, что значение изменилось существенно (избегаем ошибок с float)\n    if (Math.abs(Number(savedState[key] || 0) - Number(uiState[key] || 0)) > 1e-9) {\n        hasUnsavedChanges = true;\n        break;\n    }\n}\n\n// Формируем сообщение о статусе для панели управления\nlet statusMessage;\nif (hasUnsavedChanges) {\n    statusMessage = { payload: \"<font color='orange'>Есть несохраненные изменения!</font>\" };\n} else {\n    statusMessage = { payload: \"<font color='green'>Все изменения сохранены</font>\" };\n}\n\n// Отправляем статус на выход\nreturn statusMessage;\n",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 950,
    "y": 600,
    "wires": [
      [
        "4817c8072563ef41"
      ]
    ],
    "info": "Обработка изменений ui_numeric"
  },
  {
    "id": "c07c1e3b276f45d1",
    "type": "ui_text",
    "z": "e8bc55b391f479e3",
    "group": "5452d1cd18bb3597",
    "order": 6,
    "width": 6,
    "height": 1,
    "name": "",
    "label": "Cwater @ Tmax, %:",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "x": 1860,
    "y": 840,
    "wires": []
  },
  {
    "id": "b36fd1a4d2bfe88e",
    "type": "ui_text",
    "z": "e8bc55b391f479e3",
    "group": "5452d1cd18bb3597",
    "order": 7,
    "width": 6,
    "height": 1,
    "name": "",
    "label": "Cwater @ Tmin, %:",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "x": 1860,
    "y": 880,
    "wires": []
  },
  {
    "id": "2432e95235f10130",
    "type": "rbe",
    "z": "d6343c4f851076e5",
    "name": "Только при изменении (Manual AO0)",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "tot": "msg",
    "x": 1500,
    "y": 580,
    "wires": [
      [
        "a866867729c0120d"
      ]
    ]
  },
  {
    "id": "582791a2bf9d6382",
    "type": "rbe",
    "z": "d6343c4f851076e5",
    "name": "Только при изменении (Manual AO1)",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "tot": "msg",
    "x": 1500,
    "y": 620,
    "wires": [
      [
        "691d93218e7b8633"
      ]
    ]
  },
  {
    "id": "86496582c0578fb8",
    "type": "rbe",
    "z": "d6343c4f851076e5",
    "name": "Только при изменении (Manual AO2)",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "tot": "msg",
    "x": 1500,
    "y": 660,
    "wires": [
      [
        "eadd70a03b69a8b2"
      ]
    ]
  },
  {
    "id": "a5f768c6a45f16d2",
    "type": "rbe",
    "z": "d6343c4f851076e5",
    "name": "Только при изменении (Manual AO3)",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "tot": "msg",
    "x": 1500,
    "y": 700,
    "wires": [
      [
        "f7693ff1febd68f9"
      ]
    ]
  },
  {
    "id": "c9c78eebf53ed8aa",
    "type": "rbe",
    "z": "e8bc55b391f479e3",
    "name": "Только при изменении (Т/Ткр)",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "property": "payload",
    "x": 1740,
    "y": 80,
    "wires": [
      [
        "5a9e4bcf5c9f7f32"
      ]
    ]
  },
  {
    "id": "f89d9b4d293f3b04",
    "type": "rbe",
    "z": "e8bc55b391f479e3",
    "name": "Только при изменении (Cmasv)",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "property": "payload",
    "x": 1740,
    "y": 120,
    "wires": [
      [
        "af4c5aa37d881df2"
      ]
    ]
  },
  {
    "id": "0ba4bdb3b61fce68",
    "type": "rbe",
    "z": "e8bc55b391f479e3",
    "name": "Только при изменении (tgn)",
    "func": "rbe",
    "gap": "",
    "start": "",
    "inout": "out",
    "property": "payload",
    "x": 1740,
    "y": 160,
    "wires": [
      [
        "0854737dfb856751"
      ]
    ]
  },
  {
    "id": "e031ac783f76bca1",
    "type": "ui_text",
    "z": "db277a3598de4f9a",
    "group": "6a2db91e5da38c6d",
    "order": 5,
    "width": 6,
    "height": 1,
    "name": "Версия файла",
    "label": "Версия:",
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "x": 680,
    "y": 60,
    "wires": [],
    "info": "Текстовое поле UI: Версия файла. Показывает имя загруженного flows-файла, внедрённое в этот билд."
  },
  {
    "id": "1e979f7b9fa5e3ea",
    "type": "inject",
    "z": "db277a3598de4f9a",
    "name": "Версия файла → payload (инициализация)",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "ui.version.filename",
    "payload": "flows_crystallization_ver_2025-10-14_comm_test.json",
    "payloadType": "str",
    "x": 330,
    "y": 60,
    "wires": [
      [
        "8d54c98a6baf47af"
      ]
    ],
    "info": "Inject: публикует строку версии = имя этого файла при старте и по нажатию."
  },
  {
    "id": "920f5aa2339b2eb1",
    "type": "comment",
    "z": "db277a3598de4f9a",
    "name": "Версия на главном экране (автогенерация)",
    "info": "Этот блок добавлен автоматически: отображает имя текущего файла (версию) 'flows_crystallization_ver_2025-10-14_comm_test.json' на вкладке 'Главная Панель' → группа 'Управление и Статус'.",
    "x": 390,
    "y": 20,
    "w": 620,
    "h": 40
  },
  {
    "id": "5556fa2f5b7a418b",
    "type": "link in",
    "z": "0ed193efefc7d734",
    "name": "global.flags.set (in)",
    "links": [
      "1edcb3f4082e4162",
      "86f5cac56a824656"
    ],
    "x": 160,
    "y": 60,
    "wires": [
      [
        "574cc8db805d42e7"
      ]
    ]
  },
  {
    "id": "574cc8db805d42e7",
    "type": "function",
    "z": "0ed193efefc7d734",
    "name": "Установить глобальные флаги",
    "func": "// Writer for global flags. Expects msg.setGlobal = { key: value, ... }\nconst flags = msg.setGlobal || {};\nfor (const [k,v] of Object.entries(flags)) {\n    global.set(k, v);\n}\n// optional: show last write in status (avoid noise if too frequent)\nconst keys = Object.keys(flags);\nif (keys.length) node.status({fill:'green', shape:'dot', text:`set: ${keys.join(',')}`});\nreturn null;\n",
    "outputs": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 420,
    "y": 60,
    "wires": []
  },
  {
    "id": "86f5cac56a824656",
    "type": "link out",
    "z": "db277a3598de4f9a",
    "name": "→ global.flags.set",
    "mode": "link",
    "links": [
      "5556fa2f5b7a418b"
    ],
    "x": 820,
    "y": 360,
    "wires": []
  },
  {
    "id": "1edcb3f4082e4162",
    "type": "link out",
    "z": "e8bc55b391f479e3",
    "name": "→ global.flags.set",
    "mode": "link",
    "links": [
      "5556fa2f5b7a418b"
    ],
    "x": 1580,
    "y": 60,
    "wires": []
  },
  {
    "id": "b9ed9c5a04854dfa",
    "type": "function",
    "z": "e8bc55b391f479e3",
    "name": "NOP (sim mode: skip AI)",
    "func": "node.status({fill:'grey',shape:'ring',text:'sim: skip AI read'});\nreturn null;",
    "outputs": 0,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 400,
    "y": 100,
    "wires": []
  },
  {
    "id": "e0ef0bfb43cd4c56",
    "type": "function",
    "z": "db277a3598de4f9a",
    "name": "Очистить payload кнопок",
    "func": "msg.payload = null;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 660,
    "y": 360,
    "wires": [
      [
        "ba649f4e2e695482",
        "907964d19ad905c3"
      ]
    ],
    "info": "Функция: Очистить payload перед кнопками."
  },
  {
    "id": "3324bdba28174adc",
    "type": "ui_gauge",
    "z": "e8bc55b391f479e3",
    "name": "Tn Gauge",
    "group": "5452d1cd18bb3597",
    "order": 1,
    "width": 6,
    "height": 4,
    "gtype": "gage",
    "title": "T текущая (°C)",
    "label": "°C",
    "format": "{{value | number:1}}",
    "min": 0,
    "max": 200,
    "colors": [
      "#00bcd4",
      "#ff9800",
      "#f44336"
    ],
    "seg1": "",
    "seg2": "",
    "className": ""
  },
  {
    "id": "c43c042e2d954adf",
    "type": "ui_gauge",
    "z": "e8bc55b391f479e3",
    "name": "Tkr Gauge",
    "group": "5452d1cd18bb3597",
    "order": 2,
    "width": 6,
    "height": 4,
    "gtype": "gage",
    "title": "T кристаллизации (°C)",
    "label": "°C",
    "format": "{{value | number:2}}",
    "min": 0,
    "max": 200,
    "colors": [
      "#00bcd4",
      "#8bc34a",
      "#f44336"
    ],
    "seg1": "",
    "seg2": "",
    "className": ""
  },
  {
    "id": "e60278aac95a4d17",
    "type": "ui_gauge",
    "z": "e8bc55b391f479e3",
    "name": "Cmasv Gauge",
    "group": "5452d1cd18bb3597",
    "order": 3,
    "width": 6,
    "height": 4,
    "gtype": "gage",
    "title": "Вода, %",
    "label": "%",
    "format": "{{value | number:2}}",
    "min": 0,
    "max": 30,
    "colors": [
      "#03a9f4",
      "#4caf50",
      "#ff5722"
    ],
    "seg1": "",
    "seg2": "",
    "className": ""
  },
  {
    "id": "39b0fd4ae95a498c",
    "type": "ui_button",
    "z": "7e656866ddfe4855",
    "name": "Экспорт CSV",
    "group": "b2b4f45e0e161f86",
    "order": 5,
    "width": 6,
    "height": 1,
    "passthru": false,
    "label": "Экспорт CSV (выбранный день)",
    "tooltip": "Скопировать файл архива в папку export",
    "icon": "fa-download",
    "payload": "",
    "payloadType": "str",
    "topic": "export_csv",
    "x": 180,
    "y": 200,
    "wires": [
      [
        "0320c5fcfd5848d8"
      ]
    ]
  },
  {
    "id": "848f5561b6c84a3b",
    "type": "ui_toast",
    "z": "7e656866ddfe4855",
    "position": "top right",
    "displayTime": "3",
    "highlight": "green",
    "sendall": true,
    "outputs": 0,
    "ok": "OK",
    "cancel": "",
    "raw": false,
    "topic": "Экспорт",
    "name": "Экспорт: Успешно",
    "x": 1210,
    "y": 200,
    "wires": []
  },
  {
    "id": "72933ec49a454a73",
    "type": "ui_toast",
    "z": "7e656866ddfe4855",
    "position": "top right",
    "displayTime": "4",
    "highlight": "red",
    "sendall": true,
    "outputs": 0,
    "ok": "OK",
    "cancel": "",
    "raw": false,
    "topic": "Экспорт",
    "name": "Экспорт: Ошибка",
    "x": 1210,
    "y": 240,
    "wires": []
  },
  {
    "id": "0320c5fcfd5848d8",
    "type": "function",
    "z": "7e656866ddfe4855",
    "name": "Экспорт выбранного дня → export/",
    "func": "const fs = global.get('fs');\nif (!fs || !fs.existsSync || !fs.mkdirSync || !fs.copyFileSync) {\n    return [null, {payload: \"FS не доступен (settings.js).\"}];\n}\nconst baseDir = global.get('ARCHIVE_DIR') || '/home/root/.node-red/archives/';\nlet selectedDay = flow.get('selected_archive_day');\nif (!selectedDay) { selectedDay = new Date().getDate(); }\nconst src = `${baseDir}archive_${selectedDay}.csv`;\nconst exportDir = `${baseDir}export/`;\ntry { fs.mkdirSync(exportDir, {recursive: true}); } catch(e) {}\nconst dst = `${exportDir}export_day${String(selectedDay).padStart(2,'0')}.csv`;\ntry {\n    if (!fs.existsSync(src)) { return [null, {payload: `Файл ${src} не найден`}]; }\n    fs.copyFileSync(src, dst);\n    return [{payload: `Сохранено: ${dst}`}, null];\n} catch (e) {\n    return [null, {payload: `Ошибка экспорта: ${e.message}`}];\n}",
    "outputs": 2,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 760,
    "y": 200,
    "wires": [
      [
        "848f5561b6c84a3b"
      ],
      [
        "72933ec49a454a73"
      ]
    ]
  },
  {
    "id": "5a9e4bcf5c9f7f32",
    "type": "change",
    "z": "e8bc55b391f479e3",
    "name": "Настройка точек графика",
    "rules": [
      {
        "t": "set",
        "p": "ui_control",
        "pt": "msg",
        "to": "{\"chartOptions\":{\"elements\":{\"point\":{\"radius\":5,\"hoverRadius\":7,\"hitRadius\":9,\"borderWidth\":1}}}}",
        "tot": "json"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 1810,
    "y": 80,
    "wires": [
      [
        "30b23a31e46130ae"
      ]
    ],
    "info": "Устанавливает увеличенный радиус точек на графике процесса кристаллизации."
  },
  {
    "id": "8d54c98a6baf47af",
    "type": "change",
    "z": "db277a3598de4f9a",
    "name": "flow.version = 2025-10-14_comm_test",
    "rules": [
      {
        "t": "set",
        "p": "flow.version",
        "pt": "flow",
        "to": "2025-10-14_comm_test",
        "tot": "str"
      }
    ],
    "action": "",
    "property": "",
    "from": "",
    "to": "",
    "reg": false,
    "x": 540,
    "y": 60,
    "wires": [
      [
        "e031ac783f76bca1"
      ]
    ],
    "info": "Установка версии потока в контекст flow.version для синхронизации с dashboard."
  },
  {
    "id": "c3c4dcb1db21c2d6",
    "type": "ui_group",
    "name": "Тест связи ADAM-6717",
    "tab": "de5fd058971bb9d0",
    "order": 5,
    "disp": true,
    "width": "12",
    "collapse": false,
    "className": ""
  },
  {
    "id": "7c3472f9f50a45b6",
    "type": "ui_button",
    "z": "db277a3598de4f9a",
    "name": "Пуск теста связи",
    "group": "c3c4dcb1db21c2d6",
    "order": 1,
    "width": 4,
    "height": 1,
    "passthru": false,
    "label": "Запустить тест связи",
    "tooltip": "",
    "color": "",
    "bgcolor": "",
    "className": "",
    "icon": "fa-wifi",
    "payload": "1",
    "payloadType": "num",
    "topic": "",
    "topicType": "str",
    "x": 340,
    "y": 200,
    "wires": [
      [
        "40f68627d545f9f8"
      ]
    ],
    "info": "Кнопка запускает тест связи: устанавливает флаг HMI_LinkTest_Command = 1 в глобальном контексте."
  },
  {
    "id": "40f68627d545f9f8",
    "type": "function",
    "z": "db277a3598de4f9a",
    "name": "Команда теста связи → global",
    "func": "const value = Number(msg.payload) > 0 ? 1 : 0;\nreturn { setGlobal: { HMI_LinkTest_Command: value } };",
    "outputs": 1,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 640,
    "y": 200,
    "wires": [
      [
        "86f5cac56a824656"
      ]
    ],
    "info": "Преобразует нажатие кнопки в сообщение для link-out → global.flags.set, чтобы поднять флаг HMI_LinkTest_Command."
  },
  {
    "id": "aea1aa942b6ac42d",
    "type": "inject",
    "z": "db277a3598de4f9a",
    "name": "Опрос статуса теста связи (1с)",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "1",
    "crontab": "",
    "once": true,
    "onceDelay": 0.5,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 250,
    "y": 260,
    "wires": [
      [
        "9f572a0b0939c5d5"
      ]
    ],
    "info": "Периодически инициирует обновление отображения результатов теста связи."
  },
  {
    "id": "9f572a0b0939c5d5",
    "type": "function",
    "z": "db277a3598de4f9a",
    "name": "Подготовка данных теста связи",
    "func": "const statusCode = Number(global.get('HMI_LinkTest_StatusCode') || 0);\nlet statusText;\nswitch (statusCode) {\n    case 1:\n        statusText = '<span style=\\'color:#ff9800\\'>Ожидание ответа</span>';\n        break;\n    case 2:\n        statusText = '<span style=\\'color:#4caf50\\'>Связь подтверждена</span>';\n        break;\n    case -1:\n        statusText = '<span style=\\'color:#f44336\\'>Нет ответа</span>';\n        break;\n    default:\n        statusText = '<span style=\\'color:#607d8b\\'>Ожидание запуска</span>';\n}\nconst roundTrip = Number(global.get('HMI_LinkTest_RoundtripMs') || 0);\nconst roundTripText = roundTrip > 0 ? `${roundTrip.toFixed(0)} мс` : '—';\nconst lastPing = Number(global.get('HMI_LinkTest_LastPing') || 0);\nconst lastAck = Number(global.get('HMI_LinkTest_LastAck') || 0);\nconst detailText = `Ping: ${lastPing} → Echo: ${lastAck}`;\nreturn [{ payload: statusText }, { payload: roundTripText }, { payload: detailText }];",
    "outputs": 3,
    "noerr": 0,
    "initialize": "",
    "finalize": "",
    "libs": [],
    "x": 560,
    "y": 260,
    "wires": [
      [
        "b3a1f7a4b897a6f2"
      ],
      [
        "8f0c36cb8a85a6fb"
      ],
      [
        "4fa6a4b5e7adcc5b"
      ]
    ],
    "info": "Формирует текстовые сообщения для отображения статуса, времени отклика и последних значений ping/echo."
  },
  {
    "type": "ui_text",
    "z": "db277a3598de4f9a",
    "group": "c3c4dcb1db21c2d6",
    "width": 4,
    "height": 1,
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "style": "",
    "font": "",
    "fontSize": 0,
    "color": "",
    "wires": [],
    "id": "b3a1f7a4b897a6f2",
    "name": "Статус теста связи",
    "order": 2,
    "label": "Статус:",
    "x": 860,
    "y": 220,
    "info": "Отображает текущий результат теста связи между ADAM-6717 и панелью оператора."
  },
  {
    "type": "ui_text",
    "z": "db277a3598de4f9a",
    "group": "c3c4dcb1db21c2d6",
    "width": 4,
    "height": 1,
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "style": "",
    "font": "",
    "fontSize": 0,
    "color": "",
    "wires": [],
    "id": "8f0c36cb8a85a6fb",
    "name": "Время отклика теста связи",
    "order": 3,
    "label": "Время ответа:",
    "x": 860,
    "y": 260,
    "info": "Показывает измеренную задержку (в мс) между запросом и ответом панели."
  },
  {
    "type": "ui_text",
    "z": "db277a3598de4f9a",
    "group": "c3c4dcb1db21c2d6",
    "width": 4,
    "height": 1,
    "format": "{{msg.payload}}",
    "layout": "row-left",
    "className": "",
    "style": "",
    "font": "",
    "fontSize": 0,
    "color": "",
    "wires": [],
    "id": "4fa6a4b5e7adcc5b",
    "name": "Последний обмен теста связи",
    "order": 4,
    "label": "Последний ping/echo:",
    "x": 860,
    "y": 300,
    "info": "Отображает последние значения ping и echo для диагностики."
  }
]